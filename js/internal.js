"use strict";!function(){function e(){function e(e,t){function n(n){var s=$.makeArray(e.classList),a=n[0].oldValue,r=o||(a?a.split(" "):[]),l=s.filter(i,r),d=r.filter(i,s);t(l,d,s,r),o=s}function i(e){return this.indexOf(e)<0}var o,s=new MutationObserver(n);return s.observe(e,{attributes:!0,attributeOldValue:!0}),s.old=o,s}function t(t,n,i,o){function s(e,t){return t.every(function(t){return e.indexOf(t)>=0})}var a=n.split(" ");return i="function"==typeof i?i:function(){},o="function"==typeof o?o:function(){},new e(t,function(e,t,n,r){a.length>1?!s(r,a)&&s(n,a)?i():s(r,a)&&!s(n,a)&&o():s(e,a)?i():s(t,a)&&o()})}function n(e,t){var n,i,o=!1;return function(){return o?(n=arguments,void(i=this)):(o=!0,void setTimeout(function(){o=!1,e.apply(i,n),n=i=null},t))}}function i(){var e=$(".js-drop-zone");e.each(function(){var e=$(this),t=e.find("input"),n=e.find(".js-drop-zone-message");t.on("change",function(e){var i=t.val().split("\\"),o=i[i.length-1];t.after('\n                    <div class="drop-zone-file">\n                      <div class="drop-zone-file__name">\n                        <span data-dz-name>'+o+'</span>\n                      </div>\n                      <div class="drop-zone-file__btn" data-dz-remove>\n                      </div>\n                    </div>'),n.hasClass("hidden")||n.addClass("hidden"),$("body").trigger("dragChangeValid")}),$(document).on("click","[data-dz-remove]",function(i){i.preventDefault(),t.val(""),e.find(".drop-zone-file").remove(),n.hasClass("hidden")&&n.removeClass("hidden")})})}function o(){var e=window.navigator.userAgent,t=e.indexOf("MSIE "),n=e.indexOf("Trident/");return t>0||n>0}function s(){o()?$("html").addClass("no-object-fit"):$("html").addClass("object-fit")}function a(e,t){function n(){$(this).siblings().addClass("small")}function i(){$(this).siblings().removeClass("small")}var o=$("html");o.hasClass("no-touchevents")?(e.add(t).on("mouseenter",function(){n.call(this)}),e.add(t).on("mouseleave",function(){i.call(this)})):(e.add(t).on("touchstart",function(){n.call(this)}),e.add(t).on("touchend touchcancel",function(){i.call(this)}))}var r=.3,l=["bebe","beeb","ebeb","ebbe"],d=".js-on-visible",c="animated",u=d+"."+c,f=".js-is-visible",p="in-viewport",h="hold-outside-viewport";$(document).ready(function(){function e(e,t){function n(e){var t=e.getBoundingClientRect(),n=[["b",o],["b",s],["e",t.top],["e",t.bottom]].sort(function(e,t){return e[1]-t[1]}).map(function(e){return e[0]}).join("");return l.indexOf(n)>=0}var i=window.innerHeight,o=r*i,s=(1-r)*i;$(u).each(function(){!this.classList.contains(h)&&n(this)&&this.classList.remove(c)}),o=0,s=i,$(f).each(function(){this.classList.toggle(p,!this.classList.contains(h)&&n(this))})}var i=n(e,200),o=$(d+","+f);o.length&&($(window).off("scroll",i),$(".os-viewport").on("scroll",i),e(),o.each(function(){t(this,h,e,e)}))}),$(document).ready(function(){$(".js-accordion").on("click",function(){if($(this).parent().hasClass("active"))$(this).next().css("maxHeight","0").parent().removeClass("active");else{var e=$(this).next()[0].scrollHeight+"px";$(this).next().css("maxHeight",e).parent().addClass("active")}})}),$(document).ready(function(){function e(e){var t=$(this).find(".js-hoverTarget");t.addClass("endHover"),setTimeout(function(){t.removeClass("endHover")},e)}$(".js-arrow-animate").on("mouseleave",function(){e.call(this,210)})}),$(document).ready(function(){function e(){$(".js-burger").hasClass("active")?($(".js-burger").innerHeight($(window).innerHeight()),$(".b-page-wrapper").css({"overflow-y":"hidden"})):($(".js-burger").removeAttr("style"),$(".b-page-wrapper").css({"overflow-y":"auto"}))}$(".js-burger").innerHeight();$(".js-burger-trigger").click(function(){$(this).parent().toggleClass("active"),e()}),$(window).on("resize",function(){e()})}),i(),s();var v=window.navigator.userAgent;(v.match(/iPad/i)||v.match(/iPhone/i))&&$("html").addClass("ios"),$.fn.setCursorPosition=function(e){if(this.setSelectionRange)this.setSelectionRange(e,e);else if(this.createTextRange){var t=this.createTextRange();t.collapse(!0),e<0&&(e=$(this).val().length+e),t.moveEnd("character",e),t.moveStart("character",e),t.select()}},$("input.js-tel-input").on("mouseup",function(){$(this).setCursorPosition(3)}),$("input.js-tel-input").mask("+7 999 999 99 99",{placeholder:" ",autoclear:!1}),$(document).ready(function(){function e(){o.hasClass("open")&&(i.removeClass("no-scroll no-touch windows"),o.removeClass("open"),o.stop().fadeOut(300))}function t(e,t){var n=document,i=n.body,o=n.querySelector(t),s="client"+e;return e="scroll"+e,/CSS/.test(n.compatMode)?o[s]<o[e]:i[s]<i[e]}function n(e){e=e||$(this).attr("data-popup"),$(this).trigger("popup.open",[n]);var n=$(".b-popup[data-popup='"+e+"']");n.length>0&&(a&&t("Height",".b-page-wrapper")&&i.addClass("windows"),o.removeClass("open"),o.fadeOut(300),i.addClass("no-scroll no-touch"),n.addClass("open"),n.css("display","flex").hide().fadeIn(300),n.find(".js-preloader").length&&n.find(".js-preloader").show())}var i=$(".b-page-wrapper"),o=$(".b-popup"),s=$(".b-popup__content"),a=navigator.userAgent.toLowerCase().indexOf("windows")!==-1;$(".js-open-popup").on("popup.onClose",function(t){e()}),$(document).on("click",".js-open-popup",function(){$(this).trigger("popup.onOpen")}),$(".js-open-popup").on("popup.onOpen",function(){n.call(this)}),setTimeout(function(){n("signIn")},1e4),$(document).on("click",".js-close-popup",function(){e(),$(".js-menu-in-popup-back").length&&$(".js-menu-in-popup-back").trigger("click")}),$(document).on("keydown",function(t){27===t.keyCode&&e()}),$(document).mouseup(function(t){o.hasClass("open")&&(s.is(t.target)||0!==s.has(t.target).length||e())}),a&&t("Height",".b-page-wrapper")&&i.addClass("windows")}),$(document).ready(function(){var e=$(".b-page-wrapper"),t=$(".js-header"),n=$(".js-logo"),i=$(".js-logo-header");n.length&&e.on("scroll",function(){$(this).scrollTop()>n.offset().top+n.outerHeight()/3-t.outerHeight()?(t.addClass("fixed"),n.add(i).addClass("animate")):(t.removeClass("fixed"),n.add(i).removeClass("animate"))})}),$(document).ready(function(){$(".js-select").each(function(){var e=$(this),t=e.attr("data-placeholder");e.select2({placeholder:t,dropdownAutoWidth:!0,dropdownParent:e.parents(".b-select")}),e.siblings(".js-select-label").on("click",function(){e.select2("open")})})}),$(".js-slider-gallery").length&&$(".js-slider-gallery").each(function(){function e(e){o=i.find("[data-id="+e+"]");var t=i.find('[data-id="0"]')[0].offsetWidth;o.length&&i.css("transform","translateY(-"+t*e+"px)")}var t=$(this),n=t.parent().find(".js-slider-dots"),i=void 0,o=void 0;t.on("init reinit",function(){i=n.find(".gallery-dots"),e(0)}),t.slick({slidesToShow:1,slidesToScroll:1,dots:!0,focusOnSelect:!1,infinite:!0,mobileFirst:!0,arrows:!1,rows:0,asNavFor:".js-slider-descriptions",touchMove:!1,swipe:!1,initialSlide:0,appendDots:n,dotsClass:"gallery-dots",responsive:[{breakpoint:767,settings:{fade:!0}}]}),t.on("beforeChange",function(t,n,i,o){e(o)})}),$(".js-slider-descriptions").length&&$(".js-slider-descriptions").each(function(){function e(){var e=n.find(".slick-slide"),t=0;e.each(function(){var e=0;$(this).children().each(function(){e+=$(this).outerHeight(!0)}),e>t&&(t=e)}),e.height(t)}function t(){$(".js-slider-gallery").addClass("animate"),setTimeout(function(){$(".js-slider-gallery").removeClass("animate")},510)}var n=$(this),i=n.parent().find(".js-slider-arrow-prev"),o=n.parent().find(".js-slider-arrow-next"),s=n.parent().find(".js-description-dots");n.on("beforeChange",function(e,t,n,i){s.removeClass("active"),s.filter('[data-slide="'+i+'"]').addClass("active")}),$(".js-slider-descriptions").slick({slidesToShow:1,slidesToScroll:1,dots:!1,focusOnSelect:!1,infinite:!0,mobileFirst:!0,arrows:!0,prevArrow:i,nextArrow:o,vertical:!0,rows:0,asNavFor:".js-slider-gallery",touchMove:!1,swipe:!1,initialSlide:0}),$(window).on("load",function(){e(),n.slick("slickGoTo",0,!0)}),$(window).on("resize",e),s.on("click",function(){var e=$(this).data("slide");n.slick("slickGoTo",e,!1),t()}),i.add(o).on("click",function(e){t()}),a(i,o)}),$(".js-photo-card-slider").each(function(){var e=$(this),t=e.parent().find(".js-slider-arrow-prev"),n=e.parent().find(".js-slider-arrow-next");e.slick({slidesToShow:1,slidesToScroll:1,dots:!1,focusOnSelect:!1,infinite:!0,mobileFirst:!0,arrows:!0,prevArrow:t,nextArrow:n,rows:2,slidesPerRow:1,initialSlide:0,responsive:[{breakpoint:767,settings:{rows:1,slidesPerRow:1,slidesToShow:2}},{breakpoint:1439,settings:{rows:1,slidesPerRow:1,slidesToShow:3}},{breakpoint:1679,settings:{rows:1,slidesPerRow:1,slidesToShow:4}}]}),a(t,n)}),$(".js-trainer-slider").each(function(){var e=$(this),t=e.parent().find(".js-slider-arrow-prev"),n=e.parent().find(".js-slider-arrow-next");e.slick({slidesToShow:1,slidesToScroll:1,dots:!1,focusOnSelect:!1,infinite:!0,mobileFirst:!0,arrows:!0,prevArrow:t,nextArrow:n,rows:3,slidesPerRow:1,initialSlide:0,responsive:[{breakpoint:767,settings:{rows:1,slidesPerRow:1,slidesToShow:3}},{breakpoint:1023,settings:{rows:1,slidesPerRow:1,slidesToShow:4}}]}),a(t,n)}),$(".js-gallery-slider").each(function(){var e=$(this),t=e.parent().find(".js-slider-arrow-prev"),n=e.parent().find(".js-slider-arrow-next");e.slick({slidesToShow:1,slidesToScroll:1,dots:!1,focusOnSelect:!1,infinite:!0,mobileFirst:!0,arrows:!0,prevArrow:t,nextArrow:n,rows:0,initialSlide:0}),a(t,n)}),$(".js-news-slider").each(function(){var e=$(this),t=e.parent().find(".js-slider-arrow-prev"),n=e.parent().find(".js-slider-arrow-next");e.slick({slidesToShow:1,slidesToScroll:1,dots:!1,focusOnSelect:!1,infinite:!0,mobileFirst:!0,arrows:!0,prevArrow:t,nextArrow:n,rows:1,slidesPerRow:1,initialSlide:0}).on("beforeChange",function(t,n,i,o){var s=e.siblings(".b-news-cards__arrows").find(".js-current-slide");s.text(o+1)}),a(t,n)}),$(document).ready(function(){function e(){$(".js-tab-status").text("Выбрать"),$(".js-tab-trigger.active").find(".js-tab-status").text("Выбрано")}$(".js-tab-trigger").click(function(){var t=$(this).parents(".js-tab"),n=$(this).attr("data-tab"),i=$('.js-tab-content[data-tab="'+n+'"]');t.find(".js-tab-trigger.active").removeClass("active"),$(this).addClass("active"),t.find(".js-tab-content.active").removeClass("active"),i.addClass("active"),e()}),e()}),$(document).ready(function(){var e={ignore:'.ignore, [type="hidden"]'};$.validator.setDefaults({debug:!0}),$.extend($.validator.messages,{required:"Это обязательное поле",email:"Неверный формат данных",tel:"Неверный формат данных",date:"Пожалуйста, введите корректную дату.",number:"Пожалуйста, введите число.",equalTo:"Пароли не совпадают"}),$.validator.addMethod("max-length",function(e,t,n){return e.length<=n},"Введите не более 140 символов"),$.validator.addMethod("js-regex",function(e,t){return this.optional(t)||/^[a-zA-Zа-яА-ЯЁё ]+$/.test(e)},"Только буквы"),$.validator.addMethod("js-tel-input",function(e,t){var n=e.split(" ").join("").split("+").join("");return this.optional(t)||11==n.length},"Введите номер");var t;$.validator.addMethod("js-remote-email",function(e,t){var n=!1;return $.ajax({url:$("[data-remote-email]").data("remote-email"),data:{value:e},async:!1,success:function(e){n=e}}),n},"E-mail уже занят"),$.validator.addMethod("js-remote-phone",function(e,t){var n=!1;return $.ajax({url:$(t).data("remote-phone"),data:{value:e},async:!1,success:function(e){n=e}}),n},"Телефон уже занят"),$.validator.addMethod("max-message",function(e,t){return this.optional(t)||/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}/i.test(e)},"Пароль должен содержать не менее 6 символов, в том числе цифры и буквы латинского алфавита"),$.validator.addMethod("js-remote-subscribe",function(e,t){var n=!1;return $.ajax({url:$(t).data("remote-subscribe"),data:{value:e},async:!1,success:function(e){n=e}}),n},"Данный E-mail уже участвует в рассылке"),$.validator.addMethod("filereqired",function(e,t,n){return"file"===$(t).attr("type")&&t.files&&t.files.length},"Файл не добавлен"),$.validator.addMethod("extension",function(e,t,n){if(n="string"==typeof n?n.replace(/,/g,"|"):"png|jpe?g|gif","file"===$(t).attr("type")&&t.files&&t.files.length)for(var i=0;i<t.files.length;i++)return this.optional(t)||t.files[i].name.match(new RegExp("\\.("+n+")$","i"));return!0},$.validator.format("")),$.validator.addMethod("maxsize",function(e,t,n){if(this.optional(t))return!0;if(n=1024*n,"file"===$(t).attr("type")&&t.files&&t.files.length)for(var i=0;i<t.files.length;i++)return t.files[i].size<=n;return!0},""),$.validator.addMethod("enter-email",function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)||/^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/.test(e)},"Неверный формат данных"),$("body").on("initValidation",function(){$(".js-form-validate").each(function(){var n=$(this),i={},o=$.extend(i,e);n.data("error-selector")&&(o.errorLabelContainer=n.data("error-selector"));var s=n.validate(o),a=n.find("input.js-remote-subscribe, input.js-remote-user, input.js-remote-phone, input.js-remote-email input.js-tel-input");a.on("keydown",function(){var e=$(this);e.addClass("ignore")}).on("keyup",function(){clearTimeout(t);var e=this;t=setTimeout(function(){a.removeClass("ignore"),s.element(e)},1e3)}),n.find(".js-drop-zone").length&&$("body").on("dragChangeValid",function(){s.element(n.find(".js-drop-zone").find("input"))}),n.on("reset",function(e){s.resetForm()}),n.on("submit",function(e){if(s.numberOfInvalids()>0)e.stopImmediatePropagation(),n.addClass("error");else{var t=n,i=t.attr("action")||location.href,o=t.attr("method"),e=t.data("event"),a=new FormData(n[0]);t.hasClass("js-resume-form")&&($(".b-page-wrapper").addClass("no-scroll no-touch"),$(".b-popup[data-popup='resumeSuccess'").addClass("open"),$(".b-popup[data-popup='resumeSuccess'").css("display","flex").hide().fadeIn(300),t.find(".js-drop-zone").find("input").val(""),t.find(".drop-zone-file").remove(),t.find(".js-drop-zone-message").hasClass("hidden")&&t.find(".js-drop-zone-message").removeClass("hidden")),t.hasClass("js-feedback-form")&&($(".js-feedback-form").hide(),$(".js-feedback-success").css("display","flex").hide().fadeIn(300)),n.removeClass("error"),$.ajax({url:i,method:o,processData:!1,contentType:!1,data:a,success:function(){var e=$("div[data-popup~='success']");e.addClass("open"),n[0].reset(),n.attr("data-link")&&(window.location.href=n.attr("data-link"))},error:function(){var e=$("div[data-popup~='error']");e.addClass("open"),n[0].reset()}})}}),$(".js-select").on("select2:select",function(){s.element(this)})})}),$("body").trigger("initValidation")}),$(document).ready(function(){var e=$(".js-cursor-cirlce");$(".js-animate-cursor").on("mouseenter mousemove",function(t){var n=$(this),i=n.offset().left+e.width()/2,o=n.offset().top+e.height()/2,s=i-t.clientX,a=o-t.clientY,r=-.2;e.css({left:r*s,top:r*a})}).on("mouseleave",function(){e.css({left:0,top:0})}),$(".js-additional-cards").each(function(){var e=$(this);e.on("mouseenter mousemove",function(e){var t=$(this),n=(t.find(".js-blue-back"),t.offset().left+t.width()),i=t.offset().top,o=t.data("left")||0,s=t.data("top")||0,a=n-e.clientX+o,r=i-e.clientY+s;t.find(".js-blue-back").css({right:a,top:-r});var l=t.find("svg");if(l.length){var d=l.offset().left+l.width()/2,c=l.offset().top+l.height()/2,u=d-e.clientX,f=c-e.clientY;if(t.find(".js-move-svg").length){var p=t.find(".js-move-svg-original"),h=parseInt(p.attr("x")),v=parseInt(p.attr("y")),m=.05,g=t.find(".js-move-svg");g.attr("x",h-m*u),g.attr("y",v-m*f)}var j=t.find(".js-move-circle");j.length&&j.each(function(){var e=$(this),t=parseInt(e.attr("jsx")),n=parseInt(e.attr("jsy")),i=.05;e.attr("cx",t-i*u),e.attr("cy",n-i*f)});var w=t.find(".js-move-svg-path");if(w.length){for(var b=w.attr("dcopy"),C=b.split("C").join(" C").split("H").join(" H").split("Z").join(" Z").split(" "),y=.05,x=0,k=[];;)if(0!=C[x].indexOf("M"))if(0!=C[x].indexOf("C"))if(0!=C[x].indexOf("H")){if("Z"==C[x]){k[x]="Z";break}}else{var T=C[x].split("H")[1];k[x]="H"+(parseFloat(T)-y*u),x+=1}else{var S=C[x].split("C")[1];k[x]="C"+(parseFloat(S)-y*u),k[x+1]=parseFloat(C[x+1])-y*f,k[x+2]=parseFloat(C[x+2])-y*u,k[x+3]=parseFloat(C[x+3])-y*f,k[x+4]=parseFloat(C[x+4])-y*u,k[x+5]=parseFloat(C[x+5])-y*f,x+=6}else{var z=C[x].split("M")[1];k[x]="M"+(parseFloat(z)-y*u),k[x+1]=parseFloat(C[x+1])-y*f,x+=2}w.attr("d",k.join(" "))}}}).on("mouseleave",function(){var e=$(this);if(e.find(".js-move-svg").length){var t=e.find(".js-move-svg-original"),n=parseInt(t.attr("x")),i=parseInt(t.attr("y")),o=e.find(".js-move-svg");o.attr("x",n),o.attr("y",i)}var s=e.find(".js-move-circle");s.length&&s.each(function(){var e=$(this),t=parseInt(e.attr("jsx")),n=parseInt(e.attr("jsy"));e.attr("cx",t),e.attr("cy",n)});var a=e.find(".js-move-svg-path");if(a.length){var r=a.attr("dcopy");a.attr("d",r)}})})}),$(document).ready(function(){var e=$(".js-circle-wrap"),t=$(".js-scroll-wave");t.each(function(){var n=$(this).find("path"),i=n.attr("d"),o=i.split(" "),s=e.innerHeight(),a=1200,r=o[6],l=625,d=function(){$(".b-page-wrapper").scrollTop()>l?o[9]=0:o[9]=1,$(".b-page-wrapper").scrollTop()<=2*l&&("1"==o[9]?o[6]=($(".b-page-wrapper").scrollTop()-0)*(0-Number(r))/(l-0)+Number(r):o[6]=($(".b-page-wrapper").scrollTop()-l)*(Number(r)-0)/(2*l-l)+0,e.height(($(".b-page-wrapper").scrollTop()-0)*(a-s)/(2*l-0)+s),n.attr("d",o.join(" ")))};t.length&&$(".b-page-wrapper").on("scroll",function(){d()})})}),$(document).ready(function(){function e(e){var t=Date.parse(e)-Date.parse(new Date),n=Math.floor(t/1e3%60),i=Math.floor(t/1e3/60%60),o=Math.floor(t/36e5%24),s=Math.floor(t/864e5);return{total:t,days:s,hours:o,minutes:i,seconds:n}}function t(t,n){function i(){var i=e(n);t.find(".js-days").text(i.days),t.find(".js-hours").text(("0"+i.hours).slice(-2)),t.find(".js-minutes").text(("0"+i.minutes).slice(-2)),t.find(".js-seconds").text(("0"+i.seconds).slice(-2)),i.total<=0&&clearInterval(o)}i();var o=setInterval(i,1e3)}var n=$(".js-timer");if(n.length){var i=n.data("deadline");t(n,i)}});var m=$(".js-video")[0];$(".js-play-video").on("click",function(){m.paused?m.play():m.pause()}),$(document).ready(function(){var e=$(".js-plug-me");if(e.length){var t=function(){e.each(function(){var e=$(this),t=e.find(".js-additional-cards:last"),n=[];e.find(".js-additional-cards").each(function(){var e=$(this),t=parseInt(e.offset().top);n[t]=n[t]?n[t]+1:1});var i=Math.trunc(e.width()/t[0].clientWidth),o=n[n.length-1],s=i-o,a=e.find(".b-additional-cards__item--plug");if(a.hide().filter(":not(:first)").remove(),0==s)a.hide().filter(":not(:first)").remove();else{a.show();for(var r=a[0].outerHTML,l=1;l<s;l++)a.after(r)}})};t();var n=void 0;$(window).on("resize",function(){clearTimeout(n),n=setTimeout(function(){t()},50)}),$(".js-tab-trigger").on("click",function(){clearTimeout(n),n=setTimeout(function(){t()},50)})}}),$.bvi({bvi_target:".js-eye",bvi_theme:"white",bvi_font:"arial",bvi_font_size:16,bvi_letter_spacing:"normal",bvi_line_height:"normal",bvi_images:"grayscale",bvi_reload:!1,bvi_fixed:!1,bvi_tts:!1,bvi_flash_iframe:!0,bvi_hide:!1}),void 0===document.cookie||null===document.cookie.match("true")&&$("body").addClass("cookie"),$(document).ready(function(){$(".js-close-cookie").on("click",function(){$("body").removeClass("cookie"),document.cookie="true"})}),$(document).ready(function(){$(".js-preloader").on("animationstart",function(){$(this).parents(".b-popup").length&&$(this).parents(".b-popup").addClass("no-scroll no-touch")}),$(".js-preloader").on("animationend",function(e){"stroke-animation-3"==e.originalEvent.animationName&&($(this).parents(".b-popup").removeClass("no-scroll no-touch"),$(this).fadeOut("fast"))})}),$(document).ready(function(){var e=$("html");e.hasClass("no-touchevents")&&$(".js-hover-call").on("mouseenter",function(){window.location.href=$(this).attr("href")})})}document.addEventListener("DOMContentLoaded",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVybmFsLmpzIl0sIm5hbWVzIjpbImRvY3VtZW50UmVhZHkiLCJDbGFzc0V2ZW50IiwiZWwiLCJmdW5jIiwiY2FsbGJhY2siLCJtdXRhdGlvbnNMaXN0IiwibmV3Q2xhc3MiLCIkIiwibWFrZUFycmF5IiwiY2xhc3NMaXN0Iiwib2xkVmFsdWUiLCJvbGRDbGFzcyIsIm9sZCIsInNwbGl0IiwiYWRkZWQiLCJmaWx0ZXIiLCJjaGFuZ2VkIiwicmVtb3ZlZCIsImUiLCJ0aGlzIiwiaW5kZXhPZiIsIm1vIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlT2xkVmFsdWUiLCJvYnNlcnZlQ2xhc3NlcyIsIl9jbGFzcyIsInNob3ciLCJyZXNldCIsInRlc3QiLCJhcnIiLCJwcm9iZSIsImV2ZXJ5IiwiY2xhc3NBcnJheSIsImFsbCIsImxlbmd0aCIsInRocm90dGxlIiwibXMiLCJzYXZlZEFyZ3MiLCJzYXZlZFRoaXMiLCJpc1Rocm90dGxlZCIsImFyZ3VtZW50cyIsInNldFRpbWVvdXQiLCJhcHBseSIsImRyYWdBbmREcm9wMiIsIiRpbnN0YW5jZXMiLCJlYWNoIiwiaW5zdGFuY2UiLCJpbnB1dCIsImZpbmQiLCJtZXNzYWdlIiwib24iLCJ2YWwiLCJuYW1lIiwiYWZ0ZXIiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwidHJpZ2dlciIsImRvY3VtZW50IiwicHJldmVudERlZmF1bHQiLCJyZW1vdmUiLCJyZW1vdmVDbGFzcyIsImlzSUUiLCJ1YSIsIndpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1zaWUiLCJ0cmlkZW50IiwiU2hvd0lFQWxlcnQiLCJzbGlkZXJzQXJyb3dBbmltYXRlIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXJyb3dab29tSW4iLCJzaWJsaW5ncyIsImFycm93Wm9vbU91dCIsImh0bWwiLCJhZGQiLCJjYWxsIiwiT0ZGU0VUIiwiSU5TSURFX1BBVFRFUk5TIiwiQU5JTUFUSU9OX0NMQVNTIiwiSElEREVOX0NMQVNTIiwiQU5JTUFUSU9OX0hJRERFTl9DTEFTUyIsIlZJRVdQT1JUX0NMQVNTIiwiSU5fQ0xBU1MiLCJIT0xEX0NMQVNTIiwicmVhZHkiLCJjaGVja0VkZ2VzIiwiaW5zaWRlIiwib3V0c2lkZSIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhdHRlcm4iLCJ0b3AiLCJib3R0b20iLCJzb3J0IiwiYSIsImIiLCJtYXAiLCJqb2luIiwidmlld3BvcnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImNvbnRhaW5zIiwidG9nZ2xlIiwidGhyX2NoZWNrRWRnZXMiLCIkZWxlbWVudHMiLCJvZmYiLCJwYXJlbnQiLCJuZXh0IiwiY3NzIiwicGFuZWxIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJlbmRIb3ZlciIsInRpbWVPdXQiLCJob3ZlclB1cnBvc2UiLCJjYWxjVkgiLCJvdmVyZmxvdy15IiwicmVtb3ZlQXR0ciIsImNsaWNrIiwidG9nZ2xlQ2xhc3MiLCJtYXRjaCIsImZuIiwic2V0Q3Vyc29yUG9zaXRpb24iLCJwb3MiLCJzZXRTZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsInJhbmdlIiwiY29sbGFwc2UiLCJtb3ZlRW5kIiwibW92ZVN0YXJ0Iiwic2VsZWN0IiwibWFzayIsInBsYWNlaG9sZGVyIiwiYXV0b2NsZWFyIiwiY2xvc2VQb3BVcCIsIiRwb3BVcCIsIiRwYWdlIiwic3RvcCIsImZhZGVPdXQiLCJnZXRTY3JvbGwiLCJzY3JvbGwiLCJzZWxlY3RvciIsImRvYyIsImJvZHkiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImNsaWVudCIsImNvbXBhdE1vZGUiLCJvcGVuUG9wVXAiLCJwb3B1cCIsImF0dHIiLCIkcG9wVXBEYXRlIiwid2luZG93c09TIiwiaGlkZSIsImZhZGVJbiIsIiRwb3BVcENvbnRlbnQiLCJ0b0xvd2VyQ2FzZSIsImV2ZW50Iiwia2V5Q29kZSIsIm1vdXNldXAiLCJpcyIsInRhcmdldCIsImhhcyIsImhlYWRlciIsImxvZ29NYWluIiwibG9nb0hlYWRlciIsInNjcm9sbFRvcCIsIm9mZnNldCIsIm91dGVySGVpZ2h0IiwiJHRoaXMiLCJzZWxlY3RQbGFjZWhvbGRlciIsInNlbGVjdDIiLCJkcm9wZG93bkF1dG9XaWR0aCIsImRyb3Bkb3duUGFyZW50IiwicGFyZW50cyIsInNjcm9sbERvdHMiLCJuZXh0U2xpZGUiLCJhY3RpdmVEb3QiLCJkb3RzIiwib2Zmc2V0V2lkdGgiLCIkc2xpZGVyIiwiZG90c1dyYXAiLCJzbGljayIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwiZm9jdXNPblNlbGVjdCIsImluZmluaXRlIiwibW9iaWxlRmlyc3QiLCJhcnJvd3MiLCJyb3dzIiwiYXNOYXZGb3IiLCJ0b3VjaE1vdmUiLCJzd2lwZSIsImluaXRpYWxTbGlkZSIsImFwcGVuZERvdHMiLCJkb3RzQ2xhc3MiLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNldHRpbmdzIiwiZmFkZSIsImN1cnJlbnRTbGlkZSIsIm9wdGltaXplU2xpZGVzSGVpZ2h0IiwiJHNsaWRlcyIsIm1heEhlaWdodCIsInNsaWRlSGVpZ2h0IiwiY2hpbGRyZW4iLCJoZWlnaHQiLCJjaXJjbGVBbmltYXRlIiwiJGRvdHMiLCJ2ZXJ0aWNhbCIsImRhdGEiLCJzbGlkZXNQZXJSb3ciLCIkbnVtIiwidGV4dCIsImNoYW5nZVRhYlN0YXR1cyIsInRhYiIsImlkIiwiY29udGVudCIsIlNFVFRJTkdTIiwiaWdub3JlIiwidmFsaWRhdG9yIiwic2V0RGVmYXVsdHMiLCJkZWJ1ZyIsImV4dGVuZCIsIm1lc3NhZ2VzIiwicmVxdWlyZWQiLCJlbWFpbCIsInRlbCIsImRhdGUiLCJudW1iZXIiLCJlcXVhbFRvIiwiYWRkTWV0aG9kIiwidmFsdWUiLCJwYXJhbXMiLCJvcHRpb25hbCIsImNoZWNraW5nIiwiaXNTdWNjZXNzIiwiYWpheCIsInVybCIsImFzeW5jIiwic3VjY2VzcyIsIm1zZyIsImZpbGVzIiwicGFyYW0iLCJyZXBsYWNlIiwiaSIsIlJlZ0V4cCIsImZvcm1hdCIsInNpemUiLCJsb2NhbFNldHRpbmdzIiwiZXJyb3JMYWJlbENvbnRhaW5lciIsInZhbGlkYXRlIiwiJHJlbW90ZSIsImNsZWFyVGltZW91dCIsIl90aGlzIiwicmVzZXRGb3JtIiwibnVtYmVyT2ZJbnZhbGlkcyIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIiRmb3JtIiwibG9jYXRpb24iLCJocmVmIiwibWV0aG9kIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJlcnJvciIsIiRjaXJjbGUiLCJ4IiwibGVmdCIsIndpZHRoIiwieSIsImRpZmZYIiwiY2xpZW50WCIsImRpZmZZIiwiY2xpZW50WSIsImsiLCIkY2FyZCIsImRhdGFMZWZ0IiwiZGF0YVRvcCIsInJpZ2h0IiwiJHN2ZyIsIl94IiwiX3kiLCJfZGlmZlgiLCJfZGlmZlkiLCIkYmFzZSIsImJhc2VYIiwicGFyc2VJbnQiLCJiYXNlWSIsIiRtb3ZlIiwiJHN2Z0NpcmNsZSIsIiRzdmdQYXRoIiwicGF0aCIsInBhdGhBcnJheSIsIl9rIiwibmV3UGF0aCIsIl90ZW1wMiIsInBhcnNlRmxvYXQiLCJfdGVtcCIsInRlbXAiLCIkd2F2ZVdyYXAiLCIkd2F2ZU5ldyIsIiRwYXRoIiwiZCIsInN0YXJ0SGVpZ2h0IiwiZmluaXNoSGVpZ2h0Iiwic3RhcnRSYWRpdXMiLCJtaWRkbGVQb2ludHMiLCJtb3ZlUGF0aE5ldyIsIk51bWJlciIsImdldFRpbWVSZW1haW5pbmciLCJlbmR0aW1lIiwidCIsIkRhdGUiLCJwYXJzZSIsInNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJtaW51dGVzIiwiaG91cnMiLCJkYXlzIiwidG90YWwiLCJpbml0aWFsaXplQ2xvY2siLCIkdGltZXIiLCJkZWFkTGluZSIsInVwZGF0ZUNsb2NrIiwic2xpY2UiLCJjbGVhckludGVydmFsIiwidGltZWludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aWRlbyIsInBhdXNlZCIsInBsYXkiLCJwYXVzZSIsIiRwbHVncyIsInBsdWdpbmciLCIkcGx1ZyIsIiRsYXN0Iiwib2Zmc2V0cyIsIm1heExlbmd0aCIsInRydW5jIiwiY2xpZW50V2lkdGgiLCJjdXJyZW50IiwibmVlZCIsIiRzbHVnIiwidGVtcGxhdGUiLCJvdXRlckhUTUwiLCJ0cm90IiwiYnZpIiwiYnZpX3RhcmdldCIsImJ2aV90aGVtZSIsImJ2aV9mb250IiwiYnZpX2ZvbnRfc2l6ZSIsImJ2aV9sZXR0ZXJfc3BhY2luZyIsImJ2aV9saW5lX2hlaWdodCIsImJ2aV9pbWFnZXMiLCJidmlfcmVsb2FkIiwiYnZpX2ZpeGVkIiwiYnZpX3R0cyIsImJ2aV9mbGFzaF9pZnJhbWUiLCJidmlfaGlkZSIsInVuZGVmaW5lZCIsImNvb2tpZSIsIm9yaWdpbmFsRXZlbnQiLCJhbmltYXRpb25OYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUEsY0FFQSxXQUNFLFFBQVNBLEtBaUVQLFFBQVNDLEdBQVdDLEVBQUlDLEdBVXRCLFFBQVNDLEdBQVNDLEdBQ2hCLEdBQUlDLEdBQVdDLEVBQUVDLFVBQVVOLEVBQUdPLFdBQzFCQyxFQUFXTCxFQUFjLEdBQUdLLFNBQzVCQyxFQUFXQyxJQUFRRixFQUFXQSxFQUFTRyxNQUFNLFNBQzdDQyxFQUFRUixFQUFTUyxPQUFPQyxFQUFTTCxHQUNqQ00sRUFBVU4sRUFBU0ksT0FBT0MsRUFBU1YsRUFDdkNILEdBQUtXLEVBQU9HLEVBQVNYLEVBQVVLLEdBQy9CQyxFQUFNTixFQUdSLFFBQVNVLEdBQVFFLEdBQ2YsTUFBT0MsTUFBS0MsUUFBUUYsR0FBSyxFQXBCM0IsR0FBSU4sR0FDQVMsRUFBSyxHQUFJQyxrQkFBaUJsQixFQU05QixPQUxBaUIsR0FBR0UsUUFBUXJCLEdBQ1RzQixZQUFZLEVBQ1pDLG1CQUFtQixJQUVyQkosRUFBR1QsSUFBTUEsRUFDRlMsRUFpQlQsUUFBU0ssR0FBZXhCLEVBQUl5QixFQUFRQyxFQUFNQyxHQXFCeEMsUUFBU0MsR0FBS0MsRUFBS0MsR0FDakIsTUFBT0EsR0FBTUMsTUFBTSxTQUFVZixHQUMzQixNQUFPYSxHQUFJWCxRQUFRRixJQUFNLElBdEI3QixHQUFJZ0IsR0FBYVAsRUFBT2QsTUFBTSxJQUk5QixPQUZBZSxHQUF1QixrQkFBVEEsR0FBc0JBLEVBQU8sYUFDM0NDLEVBQXlCLGtCQUFWQSxHQUF1QkEsRUFBUSxhQUN2QyxHQUFJNUIsR0FBV0MsRUFBSSxTQUFVWSxFQUFPRyxFQUFTa0IsRUFBS3ZCLEdBQ25Ec0IsRUFBV0UsT0FBUyxHQUNqQk4sRUFBS2xCLEVBQUtzQixJQUFlSixFQUFLSyxFQUFLRCxHQUN0Q04sSUFDU0UsRUFBS2xCLEVBQUtzQixLQUFnQkosRUFBS0ssRUFBS0QsSUFDN0NMLElBR0VDLEVBQUtoQixFQUFPb0IsR0FDZE4sSUFDU0UsRUFBS2IsRUFBU2lCLElBQ3ZCTCxNQXlPUixRQUFTUSxHQUFTbEMsRUFBTW1DLEdBQ3RCLEdBQ0lDLEdBQ0FDLEVBRkFDLEdBQWMsQ0FHbEIsT0FBTyxZQUNMLE1BQUlBLElBQ0ZGLEVBQVlHLGVBQ1pGLEVBQVlyQixRQUlkc0IsR0FBYyxNQUNkRSxZQUFXLFdBQ1RGLEdBQWMsRUFDZHRDLEVBQUt5QyxNQUFNSixFQUFXRCxHQUN0QkEsRUFBWUMsRUFBWSxNQUN2QkYsS0FvRlAsUUFBU08sS0FDUCxHQUFJQyxHQUFhdkMsRUFBRSxnQkFDbkJ1QyxHQUFXQyxLQUFLLFdBQ2QsR0FBSUMsR0FBV3pDLEVBQUVZLE1BQ2I4QixFQUFRRCxFQUFTRSxLQUFLLFNBQ3RCQyxFQUFVSCxFQUFTRSxLQUFLLHdCQUM1QkQsR0FBTUcsR0FBRyxTQUFVLFNBQVVsQyxHQUMzQixHQUFJbUMsR0FBTUosRUFBTUksTUFBTXhDLE1BQU0sTUFDeEJ5QyxFQUFPRCxFQUFJQSxFQUFJakIsT0FBUyxFQUM1QmEsR0FBTU0sTUFBTSw0SkFBa0tELEVBQU8sMktBRWhMSCxFQUFRSyxTQUFTLFdBQ3BCTCxFQUFRTSxTQUFTLFVBR25CbEQsRUFBRSxRQUFRbUQsUUFBUSxxQkFFcEJuRCxFQUFFb0QsVUFBVVAsR0FBRyxRQUFTLG1CQUFvQixTQUFVbEMsR0FDcERBLEVBQUUwQyxpQkFDRlgsRUFBTUksSUFBSSxJQUNWTCxFQUFTRSxLQUFLLG1CQUFtQlcsU0FFN0JWLEVBQVFLLFNBQVMsV0FDbkJMLEVBQVFXLFlBQVksY0FTNUIsUUFBU0MsS0FDUCxHQUFJQyxHQUFLQyxPQUFPQyxVQUFVQyxVQUV0QkMsRUFBT0osRUFBRzVDLFFBQVEsU0FFbEJpRCxFQUFVTCxFQUFHNUMsUUFBUSxXQUV6QixPQUFPZ0QsR0FBTyxHQUFLQyxFQUFVLEVBSS9CLFFBQVNDLEtBQ0hQLElBQ0Z4RCxFQUFFLFFBQVFrRCxTQUFTLGlCQUVuQmxELEVBQUUsUUFBUWtELFNBQVMsY0F5S3ZCLFFBQVNjLEdBQW9CQyxFQUFXQyxHQUd0QyxRQUFTQyxLQUNQbkUsRUFBRVksTUFBTXdELFdBQVdsQixTQUFTLFNBRzlCLFFBQVNtQixLQUNQckUsRUFBRVksTUFBTXdELFdBQVdiLFlBQVksU0FQakMsR0FBSWUsR0FBT3RFLEVBQUUsT0FVVHNFLEdBQUtyQixTQUFTLG1CQUNoQmdCLEVBQVVNLElBQUlMLEdBQVdyQixHQUFHLGFBQWMsV0FDeENzQixFQUFZSyxLQUFLNUQsUUFFbkJxRCxFQUFVTSxJQUFJTCxHQUFXckIsR0FBRyxhQUFjLFdBQ3hDd0IsRUFBYUcsS0FBSzVELFVBR3BCcUQsRUFBVU0sSUFBSUwsR0FBV3JCLEdBQUcsYUFBYyxXQUN4Q3NCLEVBQVlLLEtBQUs1RCxRQUVuQnFELEVBQVVNLElBQUlMLEdBQVdyQixHQUFHLHVCQUF3QixXQUNsRHdCLEVBQWFHLEtBQUs1RCxTQXhZeEIsR0FBSTZELEdBQVMsR0FDVEMsR0FBbUIsT0FBUSxPQUFRLE9BQVEsUUFDM0NDLEVBQWtCLGlCQUVsQkMsRUFBZSxXQUVmQyxFQUF5QkYsRUFBa0IsSUFBTUMsRUFDakRFLEVBQWlCLGlCQUVqQkMsRUFBVyxjQUVYQyxFQUFhLHVCQUVqQmhGLEdBQUVvRCxVQUFVNkIsTUFBTSxXQWFoQixRQUFTQyxHQUFXQyxFQUFRQyxHQWUxQixRQUFTN0QsR0FBSzVCLEdBQ1osR0FBSTBGLEdBQU0xRixFQUFHMkYsd0JBQ1RDLElBQVksSUFBS0MsSUFBTyxJQUFLQyxJQUFVLElBQUtKLEVBQUlHLE1BQU8sSUFBS0gsRUFBSUksU0FBU0MsS0FBSyxTQUFVQyxFQUFHQyxHQUM3RixNQUFPRCxHQUFFLEdBQUtDLEVBQUUsS0FDZkMsSUFBSSxTQUFVbEYsR0FDZixNQUFPQSxHQUFFLEtBQ1JtRixLQUFLLEdBQ1IsT0FBT3BCLEdBQWdCN0QsUUFBUTBFLElBQVksRUFyQjdDLEdBQUlRLEdBQWlCckMsT0FBT3NDLFlBQ3hCUixFQUFNZixFQUFTc0IsRUFDZk4sR0FBVSxFQUFJaEIsR0FBVXNCLENBQzVCL0YsR0FBRTZFLEdBQXdCckMsS0FBSyxZQUN4QjVCLEtBQUtWLFVBQVUrRixTQUFTakIsSUFBZXpELEVBQUtYLE9BQy9DQSxLQUFLVixVQUFVb0QsT0FBT3NCLEtBRzFCWSxFQUFNLEVBQ05DLEVBQVNNLEVBQ1QvRixFQUFFOEUsR0FBZ0J0QyxLQUFLLFdBQ3JCNUIsS0FBS1YsVUFBVWdHLE9BQU9uQixHQUFXbkUsS0FBS1YsVUFBVStGLFNBQVNqQixJQUFlekQsRUFBS1gsU0F4QmpGLEdBQUl1RixHQUFpQnJFLEVBQVNvRCxFQUFZLEtBQ3RDa0IsRUFBWXBHLEVBQUUyRSxFQUFrQixJQUFNRyxFQUV0Q3NCLEdBQVV2RSxTQUNaN0IsRUFBRTBELFFBQVEyQyxJQUFJLFNBQVVGLEdBQ3hCbkcsRUFBRSxnQkFBZ0I2QyxHQUFHLFNBQVVzRCxHQUMvQmpCLElBQ0FrQixFQUFVNUQsS0FBSyxXQUNickIsRUFBZVAsS0FBTW9FLEVBQVlFLEVBQVlBLFFBb0RuRGxGLEVBQUVvRCxVQUFVNkIsTUFBTSxXQUNoQmpGLEVBQUUsaUJBQWlCNkMsR0FBRyxRQUFTLFdBQzdCLEdBQUk3QyxFQUFFWSxNQUFNMEYsU0FBU3JELFNBQVMsVUFDNUJqRCxFQUFFWSxNQUFNMkYsT0FBT0MsSUFBSSxZQUFhLEtBQUtGLFNBQVMvQyxZQUFZLGNBQ3JELENBQ0wsR0FBSWtELEdBQWN6RyxFQUFFWSxNQUFNMkYsT0FBTyxHQUFHRyxhQUFlLElBQ25EMUcsR0FBRVksTUFBTTJGLE9BQU9DLElBQUksWUFBYUMsR0FBYUgsU0FBU3BELFNBQVMsZUFLckVsRCxFQUFFb0QsVUFBVTZCLE1BQU0sV0FDaEIsUUFBUzBCLEdBQVNDLEdBQ2hCLEdBQUlDLEdBQWU3RyxFQUFFWSxNQUFNK0IsS0FBSyxrQkFDaENrRSxHQUFhM0QsU0FBUyxZQUN0QmQsV0FBVyxXQUNUeUUsRUFBYXRELFlBQVksYUFDeEJxRCxHQUdMNUcsRUFBRSxxQkFBcUI2QyxHQUFHLGFBQWMsV0FDdEM4RCxFQUFTbkMsS0FBSzVELEtBQU0sU0FJeEJaLEVBQUVvRCxVQUFVNkIsTUFBTSxXQU9oQixRQUFTNkIsS0FDSDlHLEVBQUUsY0FBY2lELFNBQVMsV0FDM0JqRCxFQUFFLGNBQWNnRyxZQUFZaEcsRUFBRTBELFFBQVFzQyxlQUN0Q2hHLEVBQUUsbUJBQW1Cd0csS0FDbkJPLGFBQWMsYUFHaEIvRyxFQUFFLGNBQWNnSCxXQUFXLFNBQzNCaEgsRUFBRSxtQkFBbUJ3RyxLQUNuQk8sYUFBYyxVQWZFL0csRUFBRSxjQUFjZ0csYUFDdENoRyxHQUFFLHNCQUFzQmlILE1BQU0sV0FDNUJqSCxFQUFFWSxNQUFNMEYsU0FBU1ksWUFBWSxVQUM3QkosTUFpQkY5RyxFQUFFMEQsUUFBUWIsR0FBRyxTQUFVLFdBQ3JCaUUsUUE2REp4RSxJQXNCQXlCLEdBQ0EsSUFBSUgsR0FBWUYsT0FBT0MsVUFBVUMsV0FFN0JBLEVBQVV1RCxNQUFNLFVBQVl2RCxFQUFVdUQsTUFBTSxhQUM5Q25ILEVBQUUsUUFBUWtELFNBQVMsT0FLckJsRCxFQUFFb0gsR0FBR0Msa0JBQW9CLFNBQVVDLEdBQ2pDLEdBQUkxRyxLQUFLMkcsa0JBQ1AzRyxLQUFLMkcsa0JBQWtCRCxFQUFLQSxPQUN2QixJQUFJMUcsS0FBSzRHLGdCQUFpQixDQUMvQixHQUFJQyxHQUFRN0csS0FBSzRHLGlCQUNqQkMsR0FBTUMsVUFBUyxHQUVYSixFQUFNLElBQ1JBLEVBQU10SCxFQUFFWSxNQUFNa0MsTUFBTWpCLE9BQVN5RixHQUcvQkcsRUFBTUUsUUFBUSxZQUFhTCxHQUMzQkcsRUFBTUcsVUFBVSxZQUFhTixHQUM3QkcsRUFBTUksV0FJVjdILEVBQUUsc0JBQXNCNkMsR0FBRyxVQUFXLFdBQ3BDN0MsRUFBRVksTUFBTXlHLGtCQUFrQixLQUU1QnJILEVBQUUsc0JBQXNCOEgsS0FBSyxvQkFDM0JDLFlBQWEsSUFDYkMsV0FBVyxJQVNiaEksRUFBRW9ELFVBQVU2QixNQUFNLFdBU2hCLFFBQVNnRCxLQUVIQyxFQUFPakYsU0FBUyxVQUNsQmtGLEVBQU01RSxZQUFZLDhCQUNsQjJFLEVBQU8zRSxZQUFZLFFBQ25CMkUsRUFBT0UsT0FBT0MsUUFBUSxNQUsxQixRQUFTQyxHQUFVQyxFQUFRQyxHQUN6QixHQUFJQyxHQUFNckYsU0FDTnNGLEVBQU9ELEVBQUlDLEtBQ1hDLEVBQVVGLEVBQUlHLGNBQWNKLEdBQzVCSyxFQUFTLFNBQVdOLENBRXhCLE9BREFBLEdBQVMsU0FBV0EsRUFDYixNQUFNaEgsS0FBS2tILEVBQUlLLFlBQWNILEVBQVFFLEdBQVVGLEVBQVFKLEdBQVVHLEVBQUtHLEdBQVVILEVBQUtILEdBWTlGLFFBQVNRLEdBQVVDLEdBQ2pCQSxFQUFRQSxHQUFTaEosRUFBRVksTUFBTXFJLEtBQUssY0FFOUJqSixFQUFFWSxNQUFNdUMsUUFBUSxjQUFlK0YsR0FDL0IsSUFBSUEsR0FBYWxKLEVBQUUsd0JBQTJCZ0osRUFBUSxLQUVsREUsR0FBV3JILE9BQVMsSUFFbEJzSCxHQUFhYixFQUFVLFNBQVUsb0JBQ25DSCxFQUFNakYsU0FBUyxXQUlqQmdGLEVBQU8zRSxZQUFZLFFBQ25CMkUsRUFBT0csUUFBUSxLQUNmRixFQUFNakYsU0FBUyxzQkFDZmdHLEVBQVdoRyxTQUFTLFFBQ3BCZ0csRUFBVzFDLElBQUksVUFBVyxRQUFRNEMsT0FBT0MsT0FBTyxLQUU1Q0gsRUFBV3ZHLEtBQUssaUJBQWlCZCxRQUNuQ3FILEVBQVd2RyxLQUFLLGlCQUFpQnRCLFFBeER2QyxHQUFJOEcsR0FBUW5JLEVBQUUsbUJBQ1ZrSSxFQUFTbEksRUFBRSxZQUNYc0osRUFBZ0J0SixFQUFFLHFCQUNsQm1KLEVBQVl4RixVQUFVQyxVQUFVMkYsY0FBYzFJLFFBQVEsZUFDMURiLEdBQUUsa0JBQWtCNkMsR0FBRyxnQkFBaUIsU0FBVTJHLEdBQ2hEdkIsTUF1QkZqSSxFQUFFb0QsVUFBVVAsR0FBRyxRQUFTLGlCQUFrQixXQUN4QzdDLEVBQUVZLE1BQU11QyxRQUFRLGtCQUdsQm5ELEVBQUUsa0JBQWtCNkMsR0FBRyxlQUFnQixXQUNyQ2tHLEVBQVV2RSxLQUFLNUQsUUE0QmpCd0IsV0FBVyxXQUNUMkcsRUFBVSxXQUNULEtBRUgvSSxFQUFFb0QsVUFBVVAsR0FBRyxRQUFTLGtCQUFtQixXQUN6Q29GLElBRUlqSSxFQUFFLDBCQUEwQjZCLFFBQzlCN0IsRUFBRSwwQkFBMEJtRCxRQUFRLFdBSXhDbkQsRUFBRW9ELFVBQVVQLEdBQUcsVUFBVyxTQUFVMkcsR0FDWixLQUFsQkEsRUFBTUMsU0FDUnhCLE1BR0pqSSxFQUFFb0QsVUFBVXNHLFFBQVEsU0FBVS9JLEdBQ3hCdUgsRUFBT2pGLFNBQVMsVUFFYnFHLEVBQWNLLEdBQUdoSixFQUFFaUosU0FBa0QsSUFBdkNOLEVBQWNPLElBQUlsSixFQUFFaUosUUFBUS9ILFFBQzdEb0csT0FLRmtCLEdBQWFiLEVBQVUsU0FBVSxvQkFDbkNILEVBQU1qRixTQUFTLGFBSW5CbEQsRUFBRW9ELFVBQVU2QixNQUFNLFdBQ2hCLEdBQUlrRCxHQUFRbkksRUFBRSxtQkFDVjhKLEVBQVM5SixFQUFFLGNBQ1grSixFQUFXL0osRUFBRSxZQUNiZ0ssRUFBYWhLLEVBQUUsa0JBQ2YrSixHQUFTbEksUUFBUXNHLEVBQU10RixHQUFHLFNBQVUsV0FDbEM3QyxFQUFFWSxNQUFNcUosWUFBY0YsRUFBU0csU0FBUzFFLElBQU11RSxFQUFTSSxjQUFnQixFQUFJTCxFQUFPSyxlQUNwRkwsRUFBTzVHLFNBQVMsU0FDaEI2RyxFQUFTeEYsSUFBSXlGLEdBQVk5RyxTQUFTLGFBRWxDNEcsRUFBT3ZHLFlBQVksU0FDbkJ3RyxFQUFTeEYsSUFBSXlGLEdBQVl6RyxZQUFZLGdCQUszQ3ZELEVBQUVvRCxVQUFVNkIsTUFBTSxXQUNoQmpGLEVBQUUsY0FBY3dDLEtBQUssV0FDbkIsR0FBSTRILEdBQVFwSyxFQUFFWSxNQUNWeUosRUFBb0JELEVBQU1uQixLQUFLLG1CQUNuQ21CLEdBQU1FLFNBQ0p2QyxZQUFhc0MsRUFDYkUsbUJBQW1CLEVBQ25CQyxlQUFnQkosRUFBTUssUUFBUSxlQUVoQ0wsRUFBTWhHLFNBQVMsb0JBQW9CdkIsR0FBRyxRQUFTLFdBQzdDdUgsRUFBTUUsUUFBUSxjQWtDaEJ0SyxFQUFFLHNCQUFzQjZCLFFBQzFCN0IsRUFBRSxzQkFBc0J3QyxLQUFLLFdBTTNCLFFBQVNrSSxHQUFXQyxHQUNsQkMsRUFBWUMsRUFBS2xJLEtBQUssWUFBY2dJLEVBQVksSUFDaEQsSUFBSW5GLEdBQU1xRixFQUFLbEksS0FBSyxpQkFBaUIsR0FBR21JLFdBRXBDRixHQUFVL0ksUUFDWmdKLEVBQUtyRSxJQUFJLFlBQWEsZUFBaUJoQixFQUFNbUYsRUFBWSxPQVY3RCxHQUFJSSxHQUFVL0ssRUFBRVksTUFDWm9LLEVBQVdELEVBQVF6RSxTQUFTM0QsS0FBSyxtQkFDakNrSSxFQUFPLE9BQ1BELEVBQVksTUFXaEJHLEdBQVFsSSxHQUFHLGNBQWUsV0FDeEJnSSxFQUFPRyxFQUFTckksS0FBSyxpQkFDckIrSCxFQUFXLEtBRWJLLEVBQVFFLE9BQ05DLGFBQWMsRUFDZEMsZUFBZ0IsRUFDaEJOLE1BQU0sRUFDTk8sZUFBZSxFQUNmQyxVQUFVLEVBQ1ZDLGFBQWEsRUFDYkMsUUFBUSxFQUNSQyxLQUFNLEVBQ05DLFNBQVUsMEJBQ1ZDLFdBQVcsRUFDWEMsT0FBTyxFQUNQQyxhQUFjLEVBQ2RDLFdBQVliLEVBQ1pjLFVBQVcsZUFDWEMsYUFDRUMsV0FBWSxJQUNaQyxVQUNFQyxNQUFNLE9BSVpuQixFQUFRbEksR0FBRyxlQUFnQixTQUFVMkcsRUFBT3lCLEVBQU9rQixFQUFjeEIsR0FDL0RELEVBQVdDLE9BS2IzSyxFQUFFLDJCQUEyQjZCLFFBQy9CN0IsRUFBRSwyQkFBMkJ3QyxLQUFLLFdBTWhDLFFBQVM0SixLQUNQLEdBQUlDLEdBQVV0QixFQUFRcEksS0FBSyxnQkFDdkIySixFQUFZLENBQ2hCRCxHQUFRN0osS0FBSyxXQUNYLEdBQUkrSixHQUFjLENBQ2xCdk0sR0FBRVksTUFBTTRMLFdBQVdoSyxLQUFLLFdBQ3RCK0osR0FBNEJ2TSxFQUFFWSxNQUFNdUosYUFBWSxLQUc5Q29DLEVBQWNELElBQ2hCQSxFQUFZQyxLQUdoQkYsRUFBUUksT0FBT0gsR0FrQmpCLFFBQVNJLEtBQ1AxTSxFQUFFLHNCQUFzQmtELFNBQVMsV0FDakNkLFdBQVcsV0FDVHBDLEVBQUUsc0JBQXNCdUQsWUFBWSxZQUNuQyxLQXhDTCxHQUFJd0gsR0FBVS9LLEVBQUVZLE1BQ1pxRCxFQUFZOEcsRUFBUXpFLFNBQVMzRCxLQUFLLHlCQUNsQ3VCLEVBQVk2RyxFQUFRekUsU0FBUzNELEtBQUsseUJBQ2xDZ0ssRUFBUTVCLEVBQVF6RSxTQUFTM0QsS0FBSyx1QkF3Q2xDb0ksR0FBUWxJLEdBQUcsZUFBZ0IsU0FBVTJHLEVBQU95QixFQUFPa0IsRUFBY3hCLEdBQy9EZ0MsRUFBTXBKLFlBQVksVUFDbEJvSixFQUFNbk0sT0FBTyxnQkFBa0JtSyxFQUFZLE1BQU16SCxTQUFTLFlBRTVEbEQsRUFBRSwyQkFBMkJpTCxPQUMzQkMsYUFBYyxFQUNkQyxlQUFnQixFQUNoQk4sTUFBTSxFQUNOTyxlQUFlLEVBQ2ZDLFVBQVUsRUFDVkMsYUFBYSxFQUNiQyxRQUFRLEVBQ1J0SCxVQUFXQSxFQUNYQyxVQUFXQSxFQUNYMEksVUFBVSxFQUNWcEIsS0FBTSxFQUNOQyxTQUFVLHFCQUNWQyxXQUFXLEVBQ1hDLE9BQU8sRUFDUEMsYUFBYyxJQUVoQjVMLEVBQUUwRCxRQUFRYixHQUFHLE9BQVEsV0FDbkJ1SixJQUNBckIsRUFBUUUsTUFBTSxZQUFhLEdBQUcsS0FFaENqTCxFQUFFMEQsUUFBUWIsR0FBRyxTQUFVdUosR0FDdkJPLEVBQU05SixHQUFHLFFBQVMsV0FDaEIsR0FBSThILEdBQVkzSyxFQUFFWSxNQUFNaU0sS0FBSyxRQUM3QjlCLEdBQVFFLE1BQU0sWUFBYU4sR0FBVyxHQUN0QytCLE1BRUZ6SSxFQUFVTSxJQUFJTCxHQUFXckIsR0FBRyxRQUFTLFNBQVVsQyxHQUU3QytMLE1BRUYxSSxFQUFvQkMsRUFBV0MsS0FJbkNsRSxFQUFFLHlCQUF5QndDLEtBQUssV0FDOUIsR0FBSXVJLEdBQVUvSyxFQUFFWSxNQUNacUQsRUFBWThHLEVBQVF6RSxTQUFTM0QsS0FBSyx5QkFDbEN1QixFQUFZNkcsRUFBUXpFLFNBQVMzRCxLQUFLLHdCQUN0Q29JLEdBQVFFLE9BQ05DLGFBQWMsRUFDZEMsZUFBZ0IsRUFDaEJOLE1BQU0sRUFDTk8sZUFBZSxFQUNmQyxVQUFVLEVBQ1ZDLGFBQWEsRUFDYkMsUUFBUSxFQUNSdEgsVUFBV0EsRUFDWEMsVUFBV0EsRUFDWHNILEtBQU0sRUFDTnNCLGFBQWMsRUFDZGxCLGFBQWMsRUFDZEcsYUFDRUMsV0FBWSxJQUNaQyxVQUNFVCxLQUFNLEVBQ05zQixhQUFjLEVBQ2Q1QixhQUFjLEtBR2hCYyxXQUFZLEtBQ1pDLFVBQ0VULEtBQU0sRUFDTnNCLGFBQWMsRUFDZDVCLGFBQWMsS0FHaEJjLFdBQVksS0FDWkMsVUFDRVQsS0FBTSxFQUNOc0IsYUFBYyxFQUNkNUIsYUFBYyxPQUlwQmxILEVBQW9CQyxFQUFXQyxLQUVqQ2xFLEVBQUUsc0JBQXNCd0MsS0FBSyxXQUMzQixHQUFJdUksR0FBVS9LLEVBQUVZLE1BQ1pxRCxFQUFZOEcsRUFBUXpFLFNBQVMzRCxLQUFLLHlCQUNsQ3VCLEVBQVk2RyxFQUFRekUsU0FBUzNELEtBQUssd0JBQ3RDb0ksR0FBUUUsT0FDTkMsYUFBYyxFQUNkQyxlQUFnQixFQUNoQk4sTUFBTSxFQUNOTyxlQUFlLEVBQ2ZDLFVBQVUsRUFDVkMsYUFBYSxFQUNiQyxRQUFRLEVBQ1J0SCxVQUFXQSxFQUNYQyxVQUFXQSxFQUNYc0gsS0FBTSxFQUNOc0IsYUFBYyxFQUNkbEIsYUFBYyxFQUNkRyxhQUNFQyxXQUFZLElBQ1pDLFVBQ0VULEtBQU0sRUFDTnNCLGFBQWMsRUFDZDVCLGFBQWMsS0FHaEJjLFdBQVksS0FDWkMsVUFDRVQsS0FBTSxFQUNOc0IsYUFBYyxFQUNkNUIsYUFBYyxPQUlwQmxILEVBQW9CQyxFQUFXQyxLQUVqQ2xFLEVBQUUsc0JBQXNCd0MsS0FBSyxXQUMzQixHQUFJdUksR0FBVS9LLEVBQUVZLE1BQ1pxRCxFQUFZOEcsRUFBUXpFLFNBQVMzRCxLQUFLLHlCQUNsQ3VCLEVBQVk2RyxFQUFRekUsU0FBUzNELEtBQUssd0JBQ3RDb0ksR0FBUUUsT0FDTkMsYUFBYyxFQUNkQyxlQUFnQixFQUNoQk4sTUFBTSxFQUNOTyxlQUFlLEVBQ2ZDLFVBQVUsRUFDVkMsYUFBYSxFQUNiQyxRQUFRLEVBQ1J0SCxVQUFXQSxFQUNYQyxVQUFXQSxFQUNYc0gsS0FBTSxFQUNOSSxhQUFjLElBRWhCNUgsRUFBb0JDLEVBQVdDLEtBRWpDbEUsRUFBRSxtQkFBbUJ3QyxLQUFLLFdBQ3hCLEdBQUl1SSxHQUFVL0ssRUFBRVksTUFDWnFELEVBQVk4RyxFQUFRekUsU0FBUzNELEtBQUsseUJBQ2xDdUIsRUFBWTZHLEVBQVF6RSxTQUFTM0QsS0FBSyx3QkFDdENvSSxHQUFRRSxPQUNOQyxhQUFjLEVBQ2RDLGVBQWdCLEVBQ2hCTixNQUFNLEVBQ05PLGVBQWUsRUFDZkMsVUFBVSxFQUNWQyxhQUFhLEVBQ2JDLFFBQVEsRUFDUnRILFVBQVdBLEVBQ1hDLFVBQVdBLEVBQ1hzSCxLQUFNLEVBQ05zQixhQUFjLEVBQ2RsQixhQUFjLElBQ2IvSSxHQUFHLGVBQWdCLFNBQVUyRyxFQUFPeUIsRUFBT2tCLEVBQWN4QixHQUMxRCxHQUFJb0MsR0FBT2hDLEVBQVEzRyxTQUFTLHlCQUF5QnpCLEtBQUssb0JBQzFEb0ssR0FBS0MsS0FBS3JDLEVBQVksS0FFeEIzRyxFQUFvQkMsRUFBV0MsS0FFakNsRSxFQUFFb0QsVUFBVTZCLE1BQU0sV0FhaEIsUUFBU2dJLEtBQ1BqTixFQUFFLGtCQUFrQmdOLEtBQUssV0FDekJoTixFQUFFLDBCQUEwQjJDLEtBQUssa0JBQWtCcUssS0FBSyxXQWQxRGhOLEVBQUUsbUJBQW1CaUgsTUFBTSxXQUN6QixHQUFJaUcsR0FBTWxOLEVBQUVZLE1BQU02SixRQUFRLFdBQ3RCMEMsRUFBS25OLEVBQUVZLE1BQU1xSSxLQUFLLFlBQ2xCbUUsRUFBVXBOLEVBQUUsNkJBQStCbU4sRUFBSyxLQUNwREQsR0FBSXZLLEtBQUssMEJBQTBCWSxZQUFZLFVBQy9DdkQsRUFBRVksTUFBTXNDLFNBQVMsVUFDakJnSyxFQUFJdkssS0FBSywwQkFBMEJZLFlBQVksVUFDL0M2SixFQUFRbEssU0FBUyxVQUNqQitKLE1BRUZBLE1BUUZqTixFQUFFb0QsVUFBVTZCLE1BQU0sV0FDaEIsR0FBSW9JLElBQ0ZDLE9BQVEsMkJBRVZ0TixHQUFFdU4sVUFBVUMsYUFDVkMsT0FBTyxJQUVUek4sRUFBRTBOLE9BQU8xTixFQUFFdU4sVUFBVUksVUFDbkJDLFNBQVUsd0JBQ1ZDLE1BQU8seUJBQ1BDLElBQUsseUJBRUxDLEtBQU0sdUNBQ05DLE9BQVEsNkJBR1JDLFFBQVMsd0JBUVhqTyxFQUFFdU4sVUFBVVcsVUFBVSxhQUFjLFNBQVVDLEVBQU94RixFQUFTeUYsR0FDNUQsTUFBT0QsR0FBTXRNLFFBQVV1TSxHQUN0QixpQ0FDSHBPLEVBQUV1TixVQUFVVyxVQUFVLFdBQVksU0FBVUMsRUFBT3hGLEdBQ2pELE1BQU8vSCxNQUFLeU4sU0FBUzFGLElBQVksdUJBQXVCcEgsS0FBSzRNLElBQzVELGdCQUNIbk8sRUFBRXVOLFVBQVVXLFVBQVUsZUFBZ0IsU0FBVUMsRUFBT3hGLEdBQ3JELEdBQUk3RixHQUFNcUwsRUFBTTdOLE1BQU0sS0FBS3dGLEtBQUssSUFBSXhGLE1BQU0sS0FBS3dGLEtBQUssR0FDcEQsT0FBT2xGLE1BQUt5TixTQUFTMUYsSUFBMEIsSUFBZDdGLEVBQUlqQixRQUNwQyxnQkFDSCxJQUFJeU0sRUFDSnRPLEdBQUV1TixVQUFVVyxVQUFVLGtCQUFtQixTQUFVQyxFQUFPeEYsR0FDeEQsR0FBSTRGLElBQVksQ0FXaEIsT0FWQXZPLEdBQUV3TyxNQUNBQyxJQUFLek8sRUFBRSx1QkFBdUI2TSxLQUFLLGdCQUNuQ0EsTUFDRXNCLE1BQU9BLEdBRVRPLE9BQU8sRUFDUEMsUUFBUyxTQUFpQkMsR0FDeEJMLEVBQVlLLEtBR1RMLEdBQ04sb0JBQ0h2TyxFQUFFdU4sVUFBVVcsVUFBVSxrQkFBbUIsU0FBVUMsRUFBT3hGLEdBQ3hELEdBQUk0RixJQUFZLENBV2hCLE9BVkF2TyxHQUFFd08sTUFDQUMsSUFBS3pPLEVBQUUySSxHQUFTa0UsS0FBSyxnQkFDckJBLE1BQ0VzQixNQUFPQSxHQUVUTyxPQUFPLEVBQ1BDLFFBQVMsU0FBaUJDLEdBQ3hCTCxFQUFZSyxLQUdUTCxHQUNOLHFCQUNIdk8sRUFBRXVOLFVBQVVXLFVBQVUsY0FBZSxTQUFVQyxFQUFPeEYsR0FDcEQsTUFBTy9ILE1BQUt5TixTQUFTMUYsSUFBWSw0REFBNERwSCxLQUFLNE0sSUFDakcsOEZBQ0huTyxFQUFFdU4sVUFBVVcsVUFBVSxzQkFBdUIsU0FBVUMsRUFBT3hGLEdBQzVELEdBQUk0RixJQUFZLENBV2hCLE9BVkF2TyxHQUFFd08sTUFDQUMsSUFBS3pPLEVBQUUySSxHQUFTa0UsS0FBSyxvQkFDckJBLE1BQ0VzQixNQUFPQSxHQUVUTyxPQUFPLEVBQ1BDLFFBQVMsU0FBaUJDLEdBQ3hCTCxFQUFZSyxLQUdUTCxHQUNOLDBDQUNIdk8sRUFBRXVOLFVBQVVXLFVBQVUsY0FBZSxTQUFVQyxFQUFPeEYsRUFBU3lGLEdBQzdELE1BQW1DLFNBQTVCcE8sRUFBRTJJLEdBQVNNLEtBQUssU0FBc0JOLEVBQVFrRyxPQUFTbEcsRUFBUWtHLE1BQU1oTixRQUMzRSxvQkFDSDdCLEVBQUV1TixVQUFVVyxVQUFVLFlBQWEsU0FBVUMsRUFBT3hGLEVBQVNtRyxHQUczRCxHQUZBQSxFQUF5QixnQkFBVkEsR0FBcUJBLEVBQU1DLFFBQVEsS0FBTSxLQUFPLGdCQUUvQixTQUE1Qi9PLEVBQUUySSxHQUFTTSxLQUFLLFNBQXNCTixFQUFRa0csT0FBU2xHLEVBQVFrRyxNQUFNaE4sT0FDdkUsSUFBSyxHQUFJbU4sR0FBSSxFQUFHQSxFQUFJckcsRUFBUWtHLE1BQU1oTixPQUFRbU4sSUFDeEMsTUFBT3BPLE1BQUt5TixTQUFTMUYsSUFBWUEsRUFBUWtHLE1BQU1HLEdBQUdqTSxLQUFLb0UsTUFBTSxHQUFJOEgsUUFBTyxPQUFTSCxFQUFRLEtBQU0sS0FJbkcsUUFBTyxHQUNOOU8sRUFBRXVOLFVBQVUyQixPQUFPLEtBQ3RCbFAsRUFBRXVOLFVBQVVXLFVBQVUsVUFBVyxTQUFVQyxFQUFPeEYsRUFBU21HLEdBQ3pELEdBQUlsTyxLQUFLeU4sU0FBUzFGLEdBQ2hCLE9BQU8sQ0FLVCxJQUZBbUcsRUFBZ0IsS0FBUkEsRUFFd0IsU0FBNUI5TyxFQUFFMkksR0FBU00sS0FBSyxTQUFzQk4sRUFBUWtHLE9BQVNsRyxFQUFRa0csTUFBTWhOLE9BQ3ZFLElBQUssR0FBSW1OLEdBQUksRUFBR0EsRUFBSXJHLEVBQVFrRyxNQUFNaE4sT0FBUW1OLElBQ3hDLE1BQU9yRyxHQUFRa0csTUFBTUcsR0FBR0csTUFBUUwsQ0FJcEMsUUFBTyxHQUNOLElBQ0g5TyxFQUFFdU4sVUFBVVcsVUFBVSxjQUFlLFNBQVVDLEVBQU94RixHQUNwRCxNQUFPL0gsTUFBS3lOLFNBQVMxRixJQUFZLHdJQUF3SXBILEtBQUs0TSxJQUFVLHNGQUFzRjVNLEtBQUs0TSxJQUNsUiwwQkFDSG5PLEVBQUUsUUFBUTZDLEdBQUcsaUJBQWtCLFdBQzdCN0MsRUFBRSxxQkFBcUJ3QyxLQUFLLFdBQzFCLEdBQUk0SCxHQUFRcEssRUFBRVksTUFDVndPLEtBQ0FuRCxFQUFXak0sRUFBRTBOLE9BQU8wQixFQUFlL0IsRUFFbkNqRCxHQUFNeUMsS0FBSyxvQkFDYlosRUFBU29ELG9CQUFzQmpGLEVBQU15QyxLQUFLLGtCQUc1QyxJQUFJVSxHQUFZbkQsRUFBTWtGLFNBQVNyRCxHQUMzQnNELEVBQVVuRixFQUFNekgsS0FBSyxtSEFDekI0TSxHQUFRMU0sR0FBRyxVQUFXLFdBQ3BCLEdBQUl1SCxHQUFRcEssRUFBRVksS0FDZHdKLEdBQU1sSCxTQUFTLFlBQ2RMLEdBQUcsUUFBUyxXQUNiMk0sYUFBYWxCLEVBRWIsSUFBSW1CLEdBQVE3TyxJQUVaME4sR0FBV2xNLFdBQVcsV0FDcEJtTixFQUFRaE0sWUFBWSxVQUNwQmdLLEVBQVU1RSxRQUFROEcsSUFDakIsT0FHRHJGLEVBQU16SCxLQUFLLGlCQUFpQmQsUUFDOUI3QixFQUFFLFFBQVE2QyxHQUFHLGtCQUFtQixXQUM5QjBLLEVBQVU1RSxRQUFReUIsRUFBTXpILEtBQUssaUJBQWlCQSxLQUFLLFlBSXZEeUgsRUFBTXZILEdBQUcsUUFBUyxTQUFVMkcsR0FDMUIrRCxFQUFVbUMsY0FFWnRGLEVBQU12SCxHQUFHLFNBQVUsU0FBVTJHLEdBQzNCLEdBQUkrRCxFQUFVb0MsbUJBQXFCLEVBQ2pDbkcsRUFBTW9HLDJCQUNOeEYsRUFBTWxILFNBQVMsYUFDVixDQUNMLEdBQUkyTSxHQUFRekYsRUFDUnFFLEVBQU1vQixFQUFNNUcsS0FBSyxXQUFhNkcsU0FBU0MsS0FDdkNDLEVBQVNILEVBQU01RyxLQUFLLFVBQ3BCTyxFQUFRcUcsRUFBTWhELEtBQUssU0FDbkJvRCxFQUFXLEdBQUlDLFVBQVM5RixFQUFNLEdBRTlCeUYsR0FBTTVNLFNBQVMsb0JBQ2pCakQsRUFBRSxtQkFBbUJrRCxTQUFTLHNCQUM5QmxELEVBQUUsdUNBQXlDa0QsU0FBUyxRQUNwRGxELEVBQUUsdUNBQXlDd0csSUFBSSxVQUFXLFFBQVE0QyxPQUFPQyxPQUFPLEtBQ2hGd0csRUFBTWxOLEtBQUssaUJBQWlCQSxLQUFLLFNBQVNHLElBQUksSUFDOUMrTSxFQUFNbE4sS0FBSyxtQkFBbUJXLFNBRTFCdU0sRUFBTWxOLEtBQUsseUJBQXlCTSxTQUFTLFdBQy9DNE0sRUFBTWxOLEtBQUsseUJBQXlCWSxZQUFZLFdBSWhEc00sRUFBTTVNLFNBQVMsc0JBQ2pCakQsRUFBRSxxQkFBcUJvSixPQUN2QnBKLEVBQUUsd0JBQXdCd0csSUFBSSxVQUFXLFFBQVE0QyxPQUFPQyxPQUFPLE1BR2pFZSxFQUFNN0csWUFBWSxTQUNsQnZELEVBQUV3TyxNQUNBQyxJQUFLQSxFQUNMdUIsT0FBUUEsRUFDUkcsYUFBYSxFQUNiQyxhQUFhLEVBQ2J2RCxLQUFNb0QsRUFDTnRCLFFBQVMsV0FDUCxHQUFJM0YsR0FBUWhKLEVBQUUsNkJBQ2RnSixHQUFNOUYsU0FBUyxRQUNma0gsRUFBTSxHQUFHOUksUUFFTDhJLEVBQU1uQixLQUFLLGVBQ2J2RixPQUFPb00sU0FBU0MsS0FBTzNGLEVBQU1uQixLQUFLLGVBR3RDb0gsTUFBTyxXQUNMLEdBQUlySCxHQUFRaEosRUFBRSwyQkFDZGdKLEdBQU05RixTQUFTLFFBQ2ZrSCxFQUFNLEdBQUc5SSxjQUtqQnRCLEVBQUUsY0FBYzZDLEdBQUcsaUJBQWtCLFdBQ25DMEssRUFBVTVFLFFBQVEvSCxZQUl4QlosRUFBRSxRQUFRbUQsUUFBUSxvQkFHcEJuRCxFQUFFb0QsVUFBVTZCLE1BQU0sV0FDaEIsR0FBSXFMLEdBQVV0USxFQUFFLG9CQUNoQkEsR0FBRSxzQkFBc0I2QyxHQUFHLHVCQUF3QixTQUFVbEMsR0FDM0QsR0FBSXlKLEdBQVFwSyxFQUFFWSxNQUdWMlAsRUFBSW5HLEVBQU1GLFNBQVNzRyxLQUFPRixFQUFRRyxRQUFVLEVBQzVDQyxFQUFJdEcsRUFBTUYsU0FBUzFFLElBQU04SyxFQUFRN0QsU0FBVyxFQUU1Q2tFLEVBQVFKLEVBQUk1UCxFQUFFaVEsUUFDZEMsRUFBUUgsRUFBSS9QLEVBQUVtUSxRQUVkQyxLQUVKVCxHQUFROUosS0FDTmdLLEtBQU1PLEVBQUlKLEVBQ1ZuTCxJQUFLdUwsRUFBSUYsTUFFVmhPLEdBQUcsYUFBYyxXQUNsQnlOLEVBQVE5SixLQUNOZ0ssS0FBTSxFQUNOaEwsSUFBSyxNQUdUeEYsRUFBRSx3QkFBd0J3QyxLQUFLLFdBQzdCLEdBQUl3TyxHQUFRaFIsRUFBRVksS0FDZG9RLEdBQU1uTyxHQUFHLHVCQUF3QixTQUFVbEMsR0FFekMsR0FBSXlKLEdBQVFwSyxFQUFFWSxNQUdWMlAsR0FGUW5HLEVBQU16SCxLQUFLLGlCQUVmeUgsRUFBTUYsU0FBU3NHLEtBQU9wRyxFQUFNcUcsU0FDaENDLEVBQUl0RyxFQUFNRixTQUFTMUUsSUFDbkJ5TCxFQUFXN0csRUFBTXlDLEtBQUssU0FBVyxFQUNqQ3FFLEVBQVU5RyxFQUFNeUMsS0FBSyxRQUFVLEVBRS9COEQsRUFBUUosRUFBSTVQLEVBQUVpUSxRQUFVSyxFQUN4QkosRUFBUUgsRUFBSS9QLEVBQUVtUSxRQUFVSSxDQUU1QjlHLEdBQU16SCxLQUFLLGlCQUFpQjZELEtBQzFCMkssTUFBT1IsRUFDUG5MLEtBQU1xTCxHQUdSLElBQUlPLEdBQU9oSCxFQUFNekgsS0FBSyxNQUV0QixJQUFJeU8sRUFBS3ZQLE9BQVEsQ0FFZixHQUFJd1AsR0FBS0QsRUFBS2xILFNBQVNzRyxLQUFPWSxFQUFLWCxRQUFVLEVBRXpDYSxFQUFLRixFQUFLbEgsU0FBUzFFLElBQU00TCxFQUFLM0UsU0FBVyxFQUd6QzhFLEVBQVNGLEVBQUsxUSxFQUFFaVEsUUFFaEJZLEVBQVNGLEVBQUszUSxFQUFFbVEsT0FHcEIsSUFBSTFHLEVBQU16SCxLQUFLLGdCQUFnQmQsT0FBUSxDQUVyQyxHQUFJNFAsR0FBUXJILEVBQU16SCxLQUFLLHlCQUNuQitPLEVBQVFDLFNBQVNGLEVBQU14SSxLQUFLLE1BQzVCMkksRUFBUUQsU0FBU0YsRUFBTXhJLEtBQUssTUFDNUI4SCxFQUFJLElBRUpjLEVBQVF6SCxFQUFNekgsS0FBSyxlQUN2QmtQLEdBQU01SSxLQUFLLElBQUt5SSxFQUFRWCxFQUFJUSxHQUM1Qk0sRUFBTTVJLEtBQUssSUFBSzJJLEVBQVFiLEVBQUlTLEdBSTlCLEdBQUlNLEdBQWExSCxFQUFNekgsS0FBSyxrQkFFeEJtUCxHQUFXalEsUUFFYmlRLEVBQVd0UCxLQUFLLFdBQ2QsR0FBSThOLEdBQVV0USxFQUFFWSxNQUNaOFEsRUFBUUMsU0FBU3JCLEVBQVFySCxLQUFLLFFBQzlCMkksRUFBUUQsU0FBU3JCLEVBQVFySCxLQUFLLFFBQzlCOEgsRUFBSSxHQUVSVCxHQUFRckgsS0FBSyxLQUFNeUksRUFBUVgsRUFBSVEsR0FDL0JqQixFQUFRckgsS0FBSyxLQUFNMkksRUFBUWIsRUFBSVMsSUFLbkMsSUFBSU8sR0FBVzNILEVBQU16SCxLQUFLLG9CQUUxQixJQUFJb1AsRUFBU2xRLE9BQVEsQ0FRbkIsSUFQQSxHQUFJbVEsR0FBT0QsRUFBUzlJLEtBQUssU0FDckJnSixFQUFZRCxFQUFLMVIsTUFBTSxLQUFLd0YsS0FBSyxNQUFNeEYsTUFBTSxLQUFLd0YsS0FBSyxNQUFNeEYsTUFBTSxLQUFLd0YsS0FBSyxNQUFNeEYsTUFBTSxLQUN6RjRSLEVBQUssSUFFTGxELEVBQUksRUFDSm1ELE9BSUYsR0FBaUMsR0FBN0JGLEVBQVVqRCxHQUFHbk8sUUFBUSxLQVF6QixHQUFpQyxHQUE3Qm9SLEVBQVVqRCxHQUFHbk8sUUFBUSxLQVl6QixHQUFpQyxHQUE3Qm9SLEVBQVVqRCxHQUFHbk8sUUFBUSxNQU96QixHQUFvQixLQUFoQm9SLEVBQVVqRCxHQUFXLENBQ3ZCbUQsRUFBUW5ELEdBQUssR0FDYixZQVRGLENBQ0UsR0FBSW9ELEdBQVNILEVBQVVqRCxHQUFHMU8sTUFBTSxLQUFLLEVBQ3JDNlIsR0FBUW5ELEdBQUssS0FBT3FELFdBQVdELEdBQVVGLEVBQUtYLEdBQzlDdkMsR0FBUSxNQWZWLENBQ0UsR0FBSXNELEdBQVFMLEVBQVVqRCxHQUFHMU8sTUFBTSxLQUFLLEVBQ3BDNlIsR0FBUW5ELEdBQUssS0FBT3FELFdBQVdDLEdBQVNKLEVBQUtYLEdBQzdDWSxFQUFRbkQsRUFBSSxHQUFLcUQsV0FBV0osRUFBVWpELEVBQUksSUFBTWtELEVBQUtWLEVBQ3JEVyxFQUFRbkQsRUFBSSxHQUFLcUQsV0FBV0osRUFBVWpELEVBQUksSUFBTWtELEVBQUtYLEVBQ3JEWSxFQUFRbkQsRUFBSSxHQUFLcUQsV0FBV0osRUFBVWpELEVBQUksSUFBTWtELEVBQUtWLEVBQ3JEVyxFQUFRbkQsRUFBSSxHQUFLcUQsV0FBV0osRUFBVWpELEVBQUksSUFBTWtELEVBQUtYLEVBQ3JEWSxFQUFRbkQsRUFBSSxHQUFLcUQsV0FBV0osRUFBVWpELEVBQUksSUFBTWtELEVBQUtWLEVBQ3JEeEMsR0FBUSxNQWhCVixDQUNFLEdBQUl1RCxHQUFPTixFQUFVakQsR0FBRzFPLE1BQU0sS0FBSyxFQUNuQzZSLEdBQVFuRCxHQUFLLEtBQU9xRCxXQUFXRSxHQUFRTCxFQUFLWCxHQUM1Q1ksRUFBUW5ELEVBQUksR0FBS3FELFdBQVdKLEVBQVVqRCxFQUFJLElBQU1rRCxFQUFLVixFQUNyRHhDLEdBQVEsRUE2QlorQyxFQUFTOUksS0FBSyxJQUFLa0osRUFBUXJNLEtBQUssVUFHbkNqRCxHQUFHLGFBQWMsV0FDbEIsR0FBSXVILEdBQVFwSyxFQUFFWSxLQUVkLElBQUl3SixFQUFNekgsS0FBSyxnQkFBZ0JkLE9BQVEsQ0FFckMsR0FBSTRQLEdBQVFySCxFQUFNekgsS0FBSyx5QkFDbkIrTyxFQUFRQyxTQUFTRixFQUFNeEksS0FBSyxNQUM1QjJJLEVBQVFELFNBQVNGLEVBQU14SSxLQUFLLE1BQzVCNEksRUFBUXpILEVBQU16SCxLQUFLLGVBQ3ZCa1AsR0FBTTVJLEtBQUssSUFBS3lJLEdBQ2hCRyxFQUFNNUksS0FBSyxJQUFLMkksR0FHbEIsR0FBSUUsR0FBYTFILEVBQU16SCxLQUFLLGtCQUV4Qm1QLEdBQVdqUSxRQUViaVEsRUFBV3RQLEtBQUssV0FDZCxHQUFJOE4sR0FBVXRRLEVBQUVZLE1BQ1o4USxFQUFRQyxTQUFTckIsRUFBUXJILEtBQUssUUFDOUIySSxFQUFRRCxTQUFTckIsRUFBUXJILEtBQUssT0FDbENxSCxHQUFRckgsS0FBSyxLQUFNeUksR0FDbkJwQixFQUFRckgsS0FBSyxLQUFNMkksSUFJdkIsSUFBSUcsR0FBVzNILEVBQU16SCxLQUFLLG9CQUUxQixJQUFJb1AsRUFBU2xRLE9BQVEsQ0FDbkIsR0FBSW1RLEdBQU9ELEVBQVM5SSxLQUFLLFFBQ3pCOEksR0FBUzlJLEtBQUssSUFBSytJLFVBTTNCaFMsRUFBRW9ELFVBQVU2QixNQUFNLFdBc0JoQixHQUFJdU4sR0FBWXhTLEVBQUUsbUJBQ2R5UyxFQUFXelMsRUFBRSxrQkFDakJ5UyxHQUFTalEsS0FBSyxXQUNaLEdBQUlrUSxHQUFRMVMsRUFBRVksTUFBTStCLEtBQUssUUFDckJnUSxFQUFJRCxFQUFNekosS0FBSyxLQUNmc0osRUFBT0ksRUFBRXJTLE1BQU0sS0FDZnNTLEVBQWNKLEVBQVV4TSxjQUN4QjZNLEVBQWUsS0FDZkMsRUFBY1AsRUFBSyxHQUVuQlEsRUFBZSxJQUVmQyxFQUFjLFdBQ1poVCxFQUFFLG1CQUFtQmlLLFlBQWM4SSxFQUNyQ1IsRUFBSyxHQUFLLEVBRVZBLEVBQUssR0FBSyxFQUdSdlMsRUFBRSxtQkFBbUJpSyxhQUFlLEVBQUk4SSxJQUMzQixLQUFYUixFQUFLLEdBQ1BBLEVBQUssSUFBTXZTLEVBQUUsbUJBQW1CaUssWUFBYyxJQUFNLEVBQUlnSixPQUFPSCxLQUFpQkMsRUFBZSxHQUFLRSxPQUFPSCxHQUUzR1AsRUFBSyxJQUFNdlMsRUFBRSxtQkFBbUJpSyxZQUFjOEksSUFBaUJFLE9BQU9ILEdBQWUsSUFBTSxFQUFJQyxFQUFlQSxHQUFnQixFQUdoSVAsRUFBVS9GLFFBQVF6TSxFQUFFLG1CQUFtQmlLLFlBQWMsSUFBTTRJLEVBQWVELElBQWdCLEVBQUlHLEVBQWUsR0FBS0gsR0FDbEhGLEVBQU16SixLQUFLLElBQUtzSixFQUFLek0sS0FBSyxPQUkxQjJNLEdBQVM1USxRQUNYN0IsRUFBRSxtQkFBbUI2QyxHQUFHLFNBQVUsV0FDaENtUSxVQVlSaFQsRUFBRW9ELFVBQVU2QixNQUFNLFdBR2hCLFFBQVNpTyxHQUFpQkMsR0FDeEIsR0FBSUMsR0FBSUMsS0FBS0MsTUFBTUgsR0FBV0UsS0FBS0MsTUFBTSxHQUFJRCxPQUN6Q0UsRUFBVUMsS0FBS0MsTUFBTUwsRUFBSSxJQUFPLElBQ2hDTSxFQUFVRixLQUFLQyxNQUFNTCxFQUFJLElBQU8sR0FBSyxJQUNyQ08sRUFBUUgsS0FBS0MsTUFBTUwsRUFBSSxLQUFtQixJQUMxQ1EsRUFBT0osS0FBS0MsTUFBTUwsRUFBSSxNQUMxQixRQUNFUyxNQUFTVCxFQUNUUSxLQUFRQSxFQUNSRCxNQUFTQSxFQUNURCxRQUFXQSxFQUNYSCxRQUFXQSxHQUlmLFFBQVNPLEdBQWdCQyxFQUFRQyxHQUMvQixRQUFTQyxLQUNQLEdBQUliLEdBQUlGLEVBQWlCYyxFQUN6QkQsR0FBT3BSLEtBQUssWUFBWXFLLEtBQUtvRyxFQUFFUSxNQUMvQkcsRUFBT3BSLEtBQUssYUFBYXFLLE1BQU0sSUFBTW9HLEVBQUVPLE9BQU9PLFdBQzlDSCxFQUFPcFIsS0FBSyxlQUFlcUssTUFBTSxJQUFNb0csRUFBRU0sU0FBU1EsV0FDbERILEVBQU9wUixLQUFLLGVBQWVxSyxNQUFNLElBQU1vRyxFQUFFRyxTQUFTVyxXQUU5Q2QsRUFBRVMsT0FBUyxHQUNiTSxjQUFjQyxHQUlsQkgsR0FDQSxJQUFJRyxHQUFlQyxZQUFZSixFQUFhLEtBL0I5QyxHQUFJRixHQUFTL1QsRUFBRSxZQWtDZixJQUFJK1QsRUFBT2xTLE9BQVEsQ0FDakIsR0FBSW1TLEdBQVdELEVBQU9sSCxLQUFLLFdBRTNCaUgsR0FBZ0JDLEVBQVFDLEtBSTVCLElBQUlNLEdBQVF0VSxFQUFFLGFBQWEsRUFDM0JBLEdBQUUsa0JBQWtCNkMsR0FBRyxRQUFTLFdBQzFCeVIsRUFBTUMsT0FDUkQsRUFBTUUsT0FFTkYsRUFBTUcsVUFJVnpVLEVBQUVvRCxVQUFVNkIsTUFBTSxXQUNoQixHQUFJeVAsR0FBUzFVLEVBQUUsY0FFZixJQUFJMFUsRUFBTzdTLE9BQVEsQ0FDakIsR0FBSThTLEdBQVUsV0FDWkQsRUFBT2xTLEtBQUssV0FDVixHQUFJb1MsR0FBUTVVLEVBQUVZLE1BQ1ZpVSxFQUFRRCxFQUFNalMsS0FBSyw2QkFFbkJtUyxJQUNKRixHQUFNalMsS0FBSyx3QkFBd0JILEtBQUssV0FDdEMsR0FBSTRILEdBQVFwSyxFQUFFWSxNQUNWNEUsRUFBTW1NLFNBQVN2SCxFQUFNRixTQUFTMUUsSUFDbENzUCxHQUFRdFAsR0FBT3NQLEVBQVF0UCxHQUFPc1AsRUFBUXRQLEdBQU8sRUFBSSxHQUVuRCxJQUFJdVAsR0FBWXZCLEtBQUt3QixNQUFNSixFQUFNbkUsUUFBVW9FLEVBQU0sR0FBR0ksYUFFaERDLEVBQVVKLEVBQVFBLEVBQVFqVCxPQUFTLEdBRW5Dc1QsRUFBT0osRUFBWUcsRUFDbkJFLEVBQVFSLEVBQU1qUyxLQUFLLGtDQUl2QixJQUZBeVMsRUFBTWhNLE9BQU81SSxPQUFPLGdCQUFnQjhDLFNBRXhCLEdBQVI2UixFQUNGQyxFQUFNaE0sT0FBTzVJLE9BQU8sZ0JBQWdCOEMsYUFDL0IsQ0FDTDhSLEVBQU0vVCxNQUdOLEtBQUssR0FGRGdVLEdBQVdELEVBQU0sR0FBR0UsVUFFZnRHLEVBQUksRUFBR0EsRUFBSW1HLEVBQU1uRyxJQUN4Qm9HLEVBQU1wUyxNQUFNcVMsTUFNcEJWLElBQ0EsSUFBSVksR0FBTyxNQUNYdlYsR0FBRTBELFFBQVFiLEdBQUcsU0FBVSxXQUNyQjJNLGFBQWErRixHQUNiQSxFQUFPblQsV0FBVyxXQUNoQnVTLEtBQ0MsTUFFTDNVLEVBQUUsbUJBQW1CNkMsR0FBRyxRQUFTLFdBQy9CMk0sYUFBYStGLEdBQ2JBLEVBQU9uVCxXQUFXLFdBQ2hCdVMsS0FDQyxTQUtUM1UsRUFBRXdWLEtBQ0FDLFdBQWMsVUFFZEMsVUFBYSxRQUViQyxTQUFZLFFBRVpDLGNBQWlCLEdBRWpCQyxtQkFBc0IsU0FFdEJDLGdCQUFtQixTQUVuQkMsV0FBYyxZQUVkQyxZQUFjLEVBRWRDLFdBQWEsRUFFYkMsU0FBVyxFQUVYQyxrQkFBb0IsRUFFcEJDLFVBQVksSUFLVUMsU0FBcEJqVCxTQUFTa1QsUUFDMkIsT0FBbENsVCxTQUFTa1QsT0FBT25QLE1BQU0sU0FDeEJuSCxFQUFFLFFBQVFrRCxTQUFTLFVBSXZCbEQsRUFBRW9ELFVBQVU2QixNQUFNLFdBQ2hCakYsRUFBRSxvQkFBb0I2QyxHQUFHLFFBQVMsV0FDaEM3QyxFQUFFLFFBQVF1RCxZQUFZLFVBQ3RCSCxTQUFTa1QsT0FBUyxXQUl0QnRXLEVBQUVvRCxVQUFVNkIsTUFBTSxXQUNoQmpGLEVBQUUsaUJBQWlCNkMsR0FBRyxpQkFBa0IsV0FDbEM3QyxFQUFFWSxNQUFNNkosUUFBUSxZQUFZNUksUUFDOUI3QixFQUFFWSxNQUFNNkosUUFBUSxZQUFZdkgsU0FBUyx3QkFHekNsRCxFQUFFLGlCQUFpQjZDLEdBQUcsZUFBZ0IsU0FBVWxDLEdBQ1Qsc0JBQWpDQSxFQUFFNFYsY0FBY0MsZ0JBQ2xCeFcsRUFBRVksTUFBTTZKLFFBQVEsWUFBWWxILFlBQVksc0JBQ3hDdkQsRUFBRVksTUFBTXlILFFBQVEsYUFLdEJySSxFQUFFb0QsVUFBVTZCLE1BQU0sV0FDaEIsR0FBSVgsR0FBT3RFLEVBQUUsT0FFVHNFLEdBQUtyQixTQUFTLG1CQUNoQmpELEVBQUUsa0JBQWtCNkMsR0FBRyxhQUFjLFdBQ25DYSxPQUFPb00sU0FBU0MsS0FBTy9QLEVBQUVZLE1BQU1xSSxLQUFLLFlBUTVDN0YsU0FBU3FULGlCQUFpQixtQkFBb0JoWCIsImZpbGUiOiJpbnRlcm5hbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkb2N1bWVudFJlYWR5KCkge1xuICAgIC8qKlxuICAgICAqINCS0LXRgNGB0LjRjyDQtNC70Y8gZXM1XG4gICAgICog0KHQvtC30LTQsNC10YIg0LzQsNGB0YHQuNCyIE1lZGlhUXVlcnlMaXN0INC4INGB0LvQtdC00LjRgiDQt9CwINC10LPQviDQvtCx0L3QvtCy0LvQtdC90LjQtdC8XG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IHF1ZXJpZXNMaXN0IC0g0J7QsdGK0LXQutGCINCy0LjQtNCwIHsgZGVmYXVsdDogZm9vLCAnKG1pbi13aWR0aDogNzYwcHgpJzogYmFyIH1cbiAgICAgKiBAcGFyYW0gIHtmdW5jdGlvbn0gZnVuYyAtINC60L7Qu9C70LHRjdC6INGE0YPQvdC60YbQuNGPLCDQv9C10YDQstGL0Lkg0L/QsNGA0LDQvNC10YLRgCDQutC+0YLQvtGA0L7QuSAtINGC0LXQutGD0YnQtdC1INC30L3QsNGH0LXQvdC40LUsXG4gICAgICog0LAg0LLRgtC+0YDQvtC5IC0g0YHRgtGA0L7QutCwINGBINGC0LXQutGD0YnQuNC8INC80LXQtNC40LAg0LfQsNC/0YDQvtGB0L7QvFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1lZGlhSGFuZGxlcihxdWVyaWVzTGlzdCwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKGYpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGYoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWZhdWx0UXVlcnk7XG4gICAgICB2YXIgcXVlcnlMaXN0O1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHF1ZXJpZXNMaXN0LmRlZmF1bHQ7XG4gICAgICB2YXIgcXVlcmllcyA9ICQuZXh0ZW5kKHt9LCBxdWVyaWVzTGlzdCk7XG4gICAgICBkZWxldGUgcXVlcmllcy5kZWZhdWx0O1xuICAgICAgZGVmYXVsdFF1ZXJ5ID0ge1xuICAgICAgICBxdWVyeTogJ2RlZmF1bHQnLFxuICAgICAgICB2YWx1ZTogZGVmYXVsdFZhbHVlXG4gICAgICB9O1xuICAgICAgcXVlcnlMaXN0ID0gT2JqZWN0LmtleXMocXVlcmllcykubWFwKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBxdWVyaWVzW3F1ZXJ5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaXN0OiB3aW5kb3cubWF0Y2hNZWRpYShxdWVyeSksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBxdWVyeUxpc3QuZm9yRWFjaChmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIG9iamVjdC5saXN0LmFkZExpc3RlbmVyKHNldEN1cnJlbnRRdWVyeSk7XG4gICAgICB9KTtcbiAgICAgIHNldEN1cnJlbnRRdWVyeSgpO1xuXG4gICAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHF1ZXJ5TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgICBvYmplY3QubGlzdC5yZW1vdmVMaXN0ZW5lcihzZXRDdXJyZW50UXVlcnkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcXVlcnlMaXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHNldEN1cnJlbnRRdWVyeSgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBxdWVyeUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lmxpc3QubWF0Y2hlcztcbiAgICAgICAgfSlbMF0gfHwgZGVmYXVsdFF1ZXJ5O1xuICAgICAgICBmdW5jKGN1cnJlbnQudmFsdWUsIGN1cnJlbnQucXVlcnkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIDtcbiAgICAvKipcbiAgICAgKiDQktC10YDRgdC40Y8g0LTQu9GPIGVzNVxuICAgICAqINCh0LvQtdC00LjRgiDQt9CwINC60LvQsNGB0YHQsNC80LggRE9NLdC+0LHRitC10LrRgtCwINC4INCy0YvQt9GL0LLQsNC10YIg0YTRg9C90LrRhtC40Y4g0L/RgNC4INC40LfQvNC10L3QtdC90LjQuCDQvdCw0LHQvtGA0LAg0LrQu9Cw0YHRgdC+0LIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtET00tb2JqZWN0fSBlbCAtINC+0LHRitC10LrRgiwg0LfQsCDQutC+0YLQvtGA0YvQvCDQstC10LTQtdGC0YHRjyDQvdCw0LHQu9GO0LTQtdC90LjQtS5cbiAgICAgKiBAcGFyYW0gIHtmdW5jdGlvbn0gZnVuYyAtINC60L7Qu9C70LHRjdC6INGE0YPQvdC60YbQuNGPLCDQv9C10YDQstGL0Lkg0L/QsNGA0LDQvNC10YLRgCDQutC+0YLQvtGA0L7QuSAtINC00L7QsdCw0LLQu9C10L3QvdGL0LUg0LrQu9Cw0YHRgdGLLFxuICAgICAqINCwINCy0YLQvtGA0L7QuSAtINGD0LHRgNCw0L3QvdGL0LUg0LrQu9Cw0YHRgdGLXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBDbGFzc0V2ZW50KGVsLCBmdW5jKSB7XG4gICAgICB2YXIgb2xkO1xuICAgICAgdmFyIG1vID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xuICAgICAgbW8ub2JzZXJ2ZShlbCwge1xuICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBtby5vbGQgPSBvbGQ7XG4gICAgICByZXR1cm4gbW87XG5cbiAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKG11dGF0aW9uc0xpc3QpIHtcbiAgICAgICAgdmFyIG5ld0NsYXNzID0gJC5tYWtlQXJyYXkoZWwuY2xhc3NMaXN0KTtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gbXV0YXRpb25zTGlzdFswXS5vbGRWYWx1ZTtcbiAgICAgICAgdmFyIG9sZENsYXNzID0gb2xkIHx8IChvbGRWYWx1ZSA/IG9sZFZhbHVlLnNwbGl0KCcgJykgOiBbXSk7XG4gICAgICAgIHZhciBhZGRlZCA9IG5ld0NsYXNzLmZpbHRlcihjaGFuZ2VkLCBvbGRDbGFzcyk7XG4gICAgICAgIHZhciByZW1vdmVkID0gb2xkQ2xhc3MuZmlsdGVyKGNoYW5nZWQsIG5ld0NsYXNzKTtcbiAgICAgICAgZnVuYyhhZGRlZCwgcmVtb3ZlZCwgbmV3Q2xhc3MsIG9sZENsYXNzKTtcbiAgICAgICAgb2xkID0gbmV3Q2xhc3M7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoYW5nZWQoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE9mKGUpIDwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvYnNlcnZlQ2xhc3NlcyhlbCwgX2NsYXNzLCBzaG93LCByZXNldCkge1xuICAgICAgdmFyIGNsYXNzQXJyYXkgPSBfY2xhc3Muc3BsaXQoJyAnKTtcblxuICAgICAgc2hvdyA9IHR5cGVvZiBzaG93ID09PSAnZnVuY3Rpb24nID8gc2hvdyA6IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcmVzZXQgPSB0eXBlb2YgcmVzZXQgPT09ICdmdW5jdGlvbicgPyByZXNldCA6IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcmV0dXJuIG5ldyBDbGFzc0V2ZW50KGVsLCBmdW5jdGlvbiAoYWRkZWQsIHJlbW92ZWQsIGFsbCwgb2xkKSB7XG4gICAgICAgIGlmIChjbGFzc0FycmF5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBpZiAoIXRlc3Qob2xkLCBjbGFzc0FycmF5KSAmJiB0ZXN0KGFsbCwgY2xhc3NBcnJheSkpIHtcbiAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRlc3Qob2xkLCBjbGFzc0FycmF5KSAmJiAhdGVzdChhbGwsIGNsYXNzQXJyYXkpKSB7XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGVzdChhZGRlZCwgY2xhc3NBcnJheSkpIHtcbiAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRlc3QocmVtb3ZlZCwgY2xhc3NBcnJheSkpIHtcbiAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gdGVzdChhcnIsIHByb2JlKSB7XG4gICAgICAgIHJldHVybiBwcm9iZS5ldmVyeShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBhcnIuaW5kZXhPZihlKSA+PSAwO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICA7XG4gICAgLyoqXG4gICAgICog0JLQtdGA0YHQuNGPINC00LvRjyBlczVcbiAgICAgKiDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDQs9C10YLRgtC10YAg0Lgg0YHQtdGC0YLQtdGAINCyINC+0LHRitC10LrRglxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lU2V0dGVyKG9iaiwgZnVuY3Rpb25zKSB7XG4gICAgICB2YXIgc2hhZG93ID0ge307XG4gICAgICBPYmplY3Qua2V5cyhmdW5jdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHNoYWRvd1trZXldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgICAgICB2YXIgb2xkID0gc2hhZG93W2tleV07XG5cbiAgICAgICAgICAgIGlmICh2YWwgIT09IG9sZCkge1xuICAgICAgICAgICAgICBzaGFkb3dba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgZnVuY3Rpb25zW2tleV0odmFsLCBvbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICA7XG4gICAgLypcbiAgICB7XG4gICAgICAgICcxMCUgLSAyMCUnOiBmdW5jdGlvbihwcm9ncmVzcykge30sXG4gICAgICAgICc1MCUnOiBmdW5jdGlvbihwcm9ncmVzcykge30sXG4gICAgfVxuICAgICBhbmltYXRpb25zdGFydFxuICAgIGFuaW1hdGlvbmVuZFxuICAgICovXG5cbiAgICBmdW5jdGlvbiBBbmltYXRpb25RdWV1ZShsaXN0LCBkdXJhdGlvbiwgdGhyb3R0bGUpIHtcbiAgICAgIHZhciBJTl9BQ1RJT04gPSAnYWN0aW9uJztcbiAgICAgIHZhciBPVVQgPSAnb3V0Oyc7XG4gICAgICB2YXIgcGVyY2VudFJlID0gbmV3IFJlZ0V4cCgnKFsuMC05XSspJScsICdnaScpO1xuICAgICAgdmFyIHNlY29uZFJlID0gbmV3IFJlZ0V4cCgnKFsuMC05XSspcycsICdnaScpO1xuICAgICAgdmFyIG1pbGxpc2Vjb25kUmUgPSBuZXcgUmVnRXhwKCcoWy4wLTldKyltcycsICdnaScpO1xuICAgICAgdmFyIHRpbWVTdGFydCA9IG51bGw7XG4gICAgICB2YXIgZmlyZWRMaXN0ID0gW107XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgc3RvcEZsYWc7XG4gICAgICB2YXIgZnJhbWUgPSAwO1xuICAgICAgdGhyb3R0bGUgPSB0aHJvdHRsZSB8fCAxO1xuXG4gICAgICBpZiAoaXNOYU4oZHVyYXRpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgYXJndW1lbnRzJyk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYmVnaW4nLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aW1lU3RhcnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdlbmQnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aW1lU3RhcnQgPyB0aW1lU3RhcnQgKyBkdXJhdGlvbiA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpbkFjdGlvbicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIEJvb2xlYW4odGltZVN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2VsZi5pbkFjdGlvbikge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2VsZi5pbkFjdGlvbikge1xuICAgICAgICAgIHN0b3BGbGFnID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5saXN0ID0gT2JqZWN0LmtleXMobGlzdCkubWFwKGZ1bmN0aW9uIChrZXksIGlkKSB7XG4gICAgICAgIHZhciBzdGFydDtcbiAgICAgICAgdmFyIGVuZDtcbiAgICAgICAgdmFyIHRpbWluZyA9IGtleS5zcGxpdCgnLScpO1xuICAgICAgICB0aW1pbmcuZm9yRWFjaChmdW5jdGlvbiAoZSwgaSwgYXJyKSB7XG4gICAgICAgICAgdmFyIHN0ciA9IGUudHJpbSgpO1xuICAgICAgICAgIHZhciB1bml0cyA9IDE7XG4gICAgICAgICAgdW5pdHMgPSAvKFsuMC05XSspJS8udGVzdChzdHIpID8gMC4wMSA6IHVuaXRzO1xuICAgICAgICAgIHVuaXRzID0gLyhbLjAtOV0rKXMvLnRlc3Qoc3RyKSA/IDEwMDAgLyBkdXJhdGlvbiA6IHVuaXRzO1xuICAgICAgICAgIHVuaXRzID0gLyhbLjAtOV0rKW1zLy50ZXN0KHN0cikgPyAxIC8gZHVyYXRpb24gOiB1bml0cztcbiAgICAgICAgICBhcnJbaV0gPSBwYXJzZUZsb2F0KHN0cikgKiB1bml0cztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHN0YXJ0OiBpc05hTih0aW1pbmdbMF0pID8gLTEgOiB0aW1pbmdbMF0sXG4gICAgICAgICAgZW5kOiBpc05hTih0aW1pbmdbMV0pID8gdGltaW5nWzBdIDogdGltaW5nWzFdLFxuICAgICAgICAgIGZ1bmM6IHR5cGVvZiBsaXN0W2tleV0gPT09ICdmdW5jdGlvbicgPyBsaXN0W2tleV0gOiBmdW5jdGlvbiAoKSB7fVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHN0ZXAodGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBwcm9ncmVzcztcbiAgICAgICAgZnJhbWUrKztcblxuICAgICAgICBpZiAoIXRpbWVTdGFydCAmJiB0eXBlb2Ygc2VsZi5hbmltYXRpb25zdGFydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHNlbGYuYW5pbWF0aW9uc3RhcnQuY2FsbChzZWxmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVTdGFydCA9IHRpbWVTdGFydCB8fCB0aW1lc3RhbXA7XG5cbiAgICAgICAgaWYgKHRpbWVzdGFtcCA8PSBzZWxmLmVuZCAmJiAhc3RvcEZsYWcpIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RvcEZsYWcgPSBudWxsO1xuICAgICAgICAgIHRpbWVTdGFydCA9IG51bGw7XG4gICAgICAgICAgZmlyZWRMaXN0ID0gW107XG4gICAgICAgICAgZnJhbWUgPSAwO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmFuaW1hdGlvbmVuZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2VsZi5hbmltYXRpb25lbmQuY2FsbChzZWxmKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhbWUgJSB0aHJvdHRsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2dyZXNzID0gbWFwKHRpbWVzdGFtcCwgc2VsZi5iZWdpbiwgc2VsZi5lbmQsIDAsIDEpO1xuICAgICAgICBzZWxmLmxpc3QuZmlsdGVyKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyIGluQWN0aW9uID0gZS5zdGFydCA8PSBwcm9ncmVzcyAmJiBwcm9ncmVzcyA8PSBlLmVuZDsgLy8g0L7QtNC40L3QvtGH0L3Ri9C5INCy0YvQt9C+0LJcblxuICAgICAgICAgIGlmIChlLnN0YXJ0ID09PSBlLmVuZCAmJiBlLnN0YXJ0IDw9IHByb2dyZXNzICYmICFmaXJlZExpc3RbZS5pZF0pIHtcbiAgICAgICAgICAgIGZpcmVkTGlzdFtlLmlkXSA9IE9VVDtcbiAgICAgICAgICAgIGUuZnVuYy5jYWxsKHNlbGYsIDAsICdvbmNlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSAvLyDQv9C10YDQstGL0Lkg0LLRi9C30L7QslxuXG5cbiAgICAgICAgICBpZiAoaW5BY3Rpb24gJiYgIWZpcmVkTGlzdFtlLmlkXSkge1xuICAgICAgICAgICAgZmlyZWRMaXN0W2UuaWRdID0gSU5fQUNUSU9OO1xuICAgICAgICAgICAgZS5mdW5jLmNhbGwoc2VsZiwgMCwgJ2ZpcnN0Jyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSAvLyDQv9C+0YHQu9C10LTQvdC40Lkg0LLRi9C30L7QslxuXG5cbiAgICAgICAgICBpZiAoIWluQWN0aW9uICYmIGZpcmVkTGlzdFtlLmlkXSA9PT0gSU5fQUNUSU9OKSB7XG4gICAgICAgICAgICBmaXJlZExpc3RbZS5pZF0gPSBPVVQ7XG4gICAgICAgICAgICBlLmZ1bmMuY2FsbChzZWxmLCAxLCAnbGFzdCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpbkFjdGlvbjtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuZnVuYy5jYWxsKHNlbGYsIG1hcChwcm9ncmVzcywgZS5zdGFydCwgZS5lbmQsIDAsIDEpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKHgsIGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgpIHtcbiAgICAgIHJldHVybiAoeCAtIGluTWluKSAqIChvdXRNYXggLSBvdXRNaW4pIC8gKGluTWF4IC0gaW5NaW4pICsgb3V0TWluO1xuICAgIH1cblxuICAgIDtcbiAgICB2YXIgT0ZGU0VUID0gMC4zO1xuICAgIHZhciBJTlNJREVfUEFUVEVSTlMgPSBbJ2JlYmUnLCAnYmVlYicsICdlYmViJywgJ2ViYmUnXTtcbiAgICB2YXIgQU5JTUFUSU9OX0NMQVNTID0gJy5qcy1vbi12aXNpYmxlJzsgLy8g0YEg0YLQvtGH0LrQvtC5XG5cbiAgICB2YXIgSElEREVOX0NMQVNTID0gJ2FuaW1hdGVkJzsgLy8g0LHQtdC3INGC0L7Rh9C60LhcblxuICAgIHZhciBBTklNQVRJT05fSElEREVOX0NMQVNTID0gQU5JTUFUSU9OX0NMQVNTICsgJy4nICsgSElEREVOX0NMQVNTO1xuICAgIHZhciBWSUVXUE9SVF9DTEFTUyA9ICcuanMtaXMtdmlzaWJsZSc7IC8vINGBINGC0L7Rh9C60L7QuVxuXG4gICAgdmFyIElOX0NMQVNTID0gJ2luLXZpZXdwb3J0JzsgLy8g0LHQtdC3INGC0L7Rh9C60LhcblxuICAgIHZhciBIT0xEX0NMQVNTID0gJ2hvbGQtb3V0c2lkZS12aWV3cG9ydCc7IC8vINCx0LXQtyDRgtC+0YfQutC4XG5cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhyX2NoZWNrRWRnZXMgPSB0aHJvdHRsZShjaGVja0VkZ2VzLCAyMDApO1xuICAgICAgdmFyICRlbGVtZW50cyA9ICQoQU5JTUFUSU9OX0NMQVNTICsgJywnICsgVklFV1BPUlRfQ0xBU1MpO1xuXG4gICAgICBpZiAoJGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwnLCB0aHJfY2hlY2tFZGdlcyk7XG4gICAgICAgICQoJy5vcy12aWV3cG9ydCcpLm9uKCdzY3JvbGwnLCB0aHJfY2hlY2tFZGdlcyk7XG4gICAgICAgIGNoZWNrRWRnZXMoKTtcbiAgICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG9ic2VydmVDbGFzc2VzKHRoaXMsIEhPTERfQ0xBU1MsIGNoZWNrRWRnZXMsIGNoZWNrRWRnZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2hlY2tFZGdlcyhpbnNpZGUsIG91dHNpZGUpIHtcbiAgICAgICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICB2YXIgdG9wID0gT0ZGU0VUICogdmlld3BvcnRIZWlnaHQ7XG4gICAgICAgIHZhciBib3R0b20gPSAoMSAtIE9GRlNFVCkgKiB2aWV3cG9ydEhlaWdodDtcbiAgICAgICAgJChBTklNQVRJT05fSElEREVOX0NMQVNTKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKEhPTERfQ0xBU1MpICYmIHRlc3QodGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShISURERU5fQ0xBU1MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRvcCA9IDA7XG4gICAgICAgIGJvdHRvbSA9IHZpZXdwb3J0SGVpZ2h0O1xuICAgICAgICAkKFZJRVdQT1JUX0NMQVNTKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoSU5fQ0xBU1MsICF0aGlzLmNsYXNzTGlzdC5jb250YWlucyhIT0xEX0NMQVNTKSAmJiB0ZXN0KHRoaXMpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gdGVzdChlbCkge1xuICAgICAgICAgIHZhciBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IFtbJ2InLCB0b3BdLCBbJ2InLCBib3R0b21dLCBbJ2UnLCBib3gudG9wXSwgWydlJywgYm94LmJvdHRvbV1dLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhWzFdIC0gYlsxXTtcbiAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlWzBdO1xuICAgICAgICAgIH0pLmpvaW4oJycpO1xuICAgICAgICAgIHJldHVybiBJTlNJREVfUEFUVEVSTlMuaW5kZXhPZihwYXR0ZXJuKSA+PSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCBtcykge1xuICAgICAgdmFyIGlzVGhyb3R0bGVkID0gZmFsc2U7XG4gICAgICB2YXIgc2F2ZWRBcmdzO1xuICAgICAgdmFyIHNhdmVkVGhpcztcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc1Rocm90dGxlZCkge1xuICAgICAgICAgIHNhdmVkQXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICBzYXZlZFRoaXMgPSB0aGlzO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzVGhyb3R0bGVkID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXNUaHJvdHRsZWQgPSBmYWxzZTtcbiAgICAgICAgICBmdW5jLmFwcGx5KHNhdmVkVGhpcywgc2F2ZWRBcmdzKTtcbiAgICAgICAgICBzYXZlZEFyZ3MgPSBzYXZlZFRoaXMgPSBudWxsO1xuICAgICAgICB9LCBtcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIDtcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAkKCcuanMtYWNjb3JkaW9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnQoKS5oYXNDbGFzcygnYWN0aXZlJykpIHtcbiAgICAgICAgICAkKHRoaXMpLm5leHQoKS5jc3MoJ21heEhlaWdodCcsICcwJykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwYW5lbEhlaWdodCA9ICQodGhpcykubmV4dCgpWzBdLnNjcm9sbEhlaWdodCArICdweCc7XG4gICAgICAgICAgJCh0aGlzKS5uZXh0KCkuY3NzKCdtYXhIZWlnaHQnLCBwYW5lbEhlaWdodCkucGFyZW50KCkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZW5kSG92ZXIodGltZU91dCkge1xuICAgICAgICB2YXIgaG92ZXJQdXJwb3NlID0gJCh0aGlzKS5maW5kKCcuanMtaG92ZXJUYXJnZXQnKTtcbiAgICAgICAgaG92ZXJQdXJwb3NlLmFkZENsYXNzKCdlbmRIb3ZlcicpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBob3ZlclB1cnBvc2UucmVtb3ZlQ2xhc3MoJ2VuZEhvdmVyJyk7XG4gICAgICAgIH0sIHRpbWVPdXQpO1xuICAgICAgfVxuXG4gICAgICAkKCcuanMtYXJyb3ctYW5pbWF0ZScpLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbmRIb3Zlci5jYWxsKHRoaXMsIDIxMCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJ1cmdlck1pbkhlaWdodCA9ICQoJy5qcy1idXJnZXInKS5pbm5lckhlaWdodCgpO1xuICAgICAgJCgnLmpzLWJ1cmdlci10cmlnZ2VyJykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgY2FsY1ZIKCk7XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gY2FsY1ZIKCkge1xuICAgICAgICBpZiAoJCgnLmpzLWJ1cmdlcicpLmhhc0NsYXNzKCdhY3RpdmUnKSkge1xuICAgICAgICAgICQoJy5qcy1idXJnZXInKS5pbm5lckhlaWdodCgkKHdpbmRvdykuaW5uZXJIZWlnaHQoKSk7XG4gICAgICAgICAgJCgnLmItcGFnZS13cmFwcGVyJykuY3NzKHtcbiAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ2hpZGRlbidcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKCcuanMtYnVyZ2VyJykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAkKCcuYi1wYWdlLXdyYXBwZXInKS5jc3Moe1xuICAgICAgICAgICAgJ292ZXJmbG93LXknOiAnYXV0bydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsY1ZIKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG5cbiAgICBmdW5jdGlvbiBkcmFnQW5kRHJvcCgpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9ICQoJy5qcy1kcm9wLXpvbmUnKSxcbiAgICAgICAgICBpbnB1dCA9IGluc3RhbmNlLmZpbmQoJ2lucHV0Jyk7XG4gICAgICBpbnB1dC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLmRyb3B6b25lKHtcbiAgICAgICAgdXJsOiAnL2ZpbGUvcG9zdCcsXG4gICAgICAgIG1heEZpbGVzOiAxLFxuICAgICAgICBhY2NlcHRlZEZpbGVzOiAnLnJ0ZixhcHBsaWNhdGlvbi9wZGYsLmRvYywuZG9jeCcsXG4gICAgICAgIHByZXZpZXdUZW1wbGF0ZTogXCJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZHJvcC16b25lLWZpbGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRyb3Atem9uZS1maWxlX19uYW1lXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtZHotbmFtZT48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZHJvcC16b25lLWZpbGVfX2J0blxcXCIgZGF0YS1kei1yZW1vdmU+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICBcIixcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IGluc3RhbmNlLmZpbmQoJy5qcy1kcm9wLXpvbmUtbWVzc2FnZScpO1xuICAgICAgICAgIHRoaXMub24oXCJhZGRlZGZpbGVcIiwgZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICAgIGlmICghbWVzc2FnZS5oYXNDbGFzcygnaGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5vbihcInJlc2V0XCIsIGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5oYXNDbGFzcygnaGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyYWdBbmREcm9wMigpIHtcbiAgICAgIHZhciAkaW5zdGFuY2VzID0gJCgnLmpzLWRyb3Atem9uZScpO1xuICAgICAgJGluc3RhbmNlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGlucHV0ID0gaW5zdGFuY2UuZmluZCgnaW5wdXQnKTtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBpbnN0YW5jZS5maW5kKCcuanMtZHJvcC16b25lLW1lc3NhZ2UnKTtcbiAgICAgICAgaW5wdXQub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgdmFsID0gaW5wdXQudmFsKCkuc3BsaXQoJ1xcXFwnKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IHZhbFt2YWwubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaW5wdXQuYWZ0ZXIoXCJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRyb3Atem9uZS1maWxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZHJvcC16b25lLWZpbGVfX25hbWVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtZHotbmFtZT5cIiArIG5hbWUgKyBcIjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRyb3Atem9uZS1maWxlX19idG5cXFwiIGRhdGEtZHotcmVtb3ZlPlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlwiKTtcblxuICAgICAgICAgIGlmICghbWVzc2FnZS5oYXNDbGFzcygnaGlkZGVuJykpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICQoXCJib2R5XCIpLnRyaWdnZXIoXCJkcmFnQ2hhbmdlVmFsaWRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsICdbZGF0YS1kei1yZW1vdmVdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaW5wdXQudmFsKCcnKTtcbiAgICAgICAgICBpbnN0YW5jZS5maW5kKCcuZHJvcC16b25lLWZpbGUnKS5yZW1vdmUoKTtcblxuICAgICAgICAgIGlmIChtZXNzYWdlLmhhc0NsYXNzKCdoaWRkZW4nKSkge1xuICAgICAgICAgICAgbWVzc2FnZS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRyYWdBbmREcm9wMigpO1xuICAgIDtcblxuICAgIGZ1bmN0aW9uIGlzSUUoKSB7XG4gICAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDsgLy9DaGVjayB0aGUgdXNlckFnZW50IHByb3BlcnR5IG9mIHRoZSB3aW5kb3cubmF2aWdhdG9yIG9iamVjdFxuXG4gICAgICB2YXIgbXNpZSA9IHVhLmluZGV4T2YoJ01TSUUgJyk7IC8vIElFIDEwIG9yIG9sZGVyXG5cbiAgICAgIHZhciB0cmlkZW50ID0gdWEuaW5kZXhPZignVHJpZGVudC8nKTsgLy9JRSAxMVxuXG4gICAgICByZXR1cm4gbXNpZSA+IDAgfHwgdHJpZGVudCA+IDA7XG4gICAgfSAvL2Z1bmN0aW9uIHRvIHNob3cgYWxlcnQgaWYgaXQncyBJRVxuXG5cbiAgICBmdW5jdGlvbiBTaG93SUVBbGVydCgpIHtcbiAgICAgIGlmIChpc0lFKCkpIHtcbiAgICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCduby1vYmplY3QtZml0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKCdodG1sJykuYWRkQ2xhc3MoJ29iamVjdC1maXQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBTaG93SUVBbGVydCgpO1xuICAgIHZhciB1c2VyQWdlbnQgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgIGlmICh1c2VyQWdlbnQubWF0Y2goL2lQYWQvaSkgfHwgdXNlckFnZW50Lm1hdGNoKC9pUGhvbmUvaSkpIHtcbiAgICAgICQoJ2h0bWwnKS5hZGRDbGFzcygnaW9zJyk7XG4gICAgfVxuXG4gICAgO1xuXG4gICAgJC5mbi5zZXRDdXJzb3JQb3NpdGlvbiA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIGlmICh0aGlzLnNldFNlbGVjdGlvblJhbmdlKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uUmFuZ2UocG9zLCBwb3MpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcblxuICAgICAgICBpZiAocG9zIDwgMCkge1xuICAgICAgICAgIHBvcyA9ICQodGhpcykudmFsKCkubGVuZ3RoICsgcG9zO1xuICAgICAgICB9XG5cbiAgICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBwb3MpO1xuICAgICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJCgnaW5wdXQuanMtdGVsLWlucHV0Jykub24oJ21vdXNldXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkKHRoaXMpLnNldEN1cnNvclBvc2l0aW9uKDMpO1xuICAgIH0pO1xuICAgICQoJ2lucHV0LmpzLXRlbC1pbnB1dCcpLm1hc2soJys3IDk5OSA5OTkgOTkgOTknLCB7XG4gICAgICBwbGFjZWhvbGRlcjogJyAnLFxuICAgICAgYXV0b2NsZWFyOiBmYWxzZVxuICAgIH0pO1xuICAgIDsgLy8gPT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyByb2JpbnpvbjogcG9wdXAuanNcbiAgICAvLyAxNS4wMS4yMDE4OiBBbWVkb21hcnlcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyDQntGC0LrRgNGL0YLQuNC1INC/0L7Qv9CQ0L/QsCDQuCDQt9Cw0L/RgNC10YIg0YHQutGA0L7Qu9CwINC90LAgYm9keVxuICAgIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHBhZ2UgPSAkKCcuYi1wYWdlLXdyYXBwZXInKTtcbiAgICAgIHZhciAkcG9wVXAgPSAkKCcuYi1wb3B1cCcpO1xuICAgICAgdmFyICRwb3BVcENvbnRlbnQgPSAkKCcuYi1wb3B1cF9fY29udGVudCcpO1xuICAgICAgdmFyIHdpbmRvd3NPUyA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCd3aW5kb3dzJykgIT09IC0xO1xuICAgICAgJCgnLmpzLW9wZW4tcG9wdXAnKS5vbigncG9wdXAub25DbG9zZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBjbG9zZVBvcFVwKCk7XG4gICAgICB9KTsgLy8g0JfQsNC60YDRi9GC0LjQtSDQv9C+0L/QkNC/0L7QslxuXG4gICAgICBmdW5jdGlvbiBjbG9zZVBvcFVwKCkge1xuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0L7RgtC60YDRi9GCINC70Lgg0L/QvtC/0JDQv1xuICAgICAgICBpZiAoJHBvcFVwLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgICAkcGFnZS5yZW1vdmVDbGFzcygnbm8tc2Nyb2xsIG5vLXRvdWNoIHdpbmRvd3MnKTtcbiAgICAgICAgICAkcG9wVXAucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAkcG9wVXAuc3RvcCgpLmZhZGVPdXQoMzAwKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L3QsNC70LjRh9C40LUg0YHQutGA0L7Qu9Cw0LBcblxuXG4gICAgICBmdW5jdGlvbiBnZXRTY3JvbGwoc2Nyb2xsLCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgZG9jID0gZG9jdW1lbnQ7XG4gICAgICAgIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICB2YXIgY2xpZW50ID0gJ2NsaWVudCcgKyBzY3JvbGw7XG4gICAgICAgIHNjcm9sbCA9ICdzY3JvbGwnICsgc2Nyb2xsO1xuICAgICAgICByZXR1cm4gL0NTUy8udGVzdChkb2MuY29tcGF0TW9kZSkgPyBlbGVtZW50W2NsaWVudF0gPCBlbGVtZW50W3Njcm9sbF0gOiBib2R5W2NsaWVudF0gPCBib2R5W3Njcm9sbF07XG4gICAgICB9IC8vINCa0LvQuNC6INC/0L4g0YHRgdGL0LvQutC1INC+0YLQutGA0YvQstCw0Y7RidC10Lkg0L/QvtC/0JDQv1xuXG5cbiAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuanMtb3Blbi1wb3B1cCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdwb3B1cC5vbk9wZW4nKTtcbiAgICAgIH0pOyAvLyDQmtCw0YHRgtC+0LzQvdC+0LUg0YHQvtCx0YvRgtC40LUg0L7RgtC60YDRi9GC0LjQtSDQv9C+0L/QkNC/XG5cbiAgICAgICQoJy5qcy1vcGVuLXBvcHVwJykub24oJ3BvcHVwLm9uT3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb3BlblBvcFVwLmNhbGwodGhpcyk7XG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gb3BlblBvcFVwKHBvcHVwKSB7XG4gICAgICAgIHBvcHVwID0gcG9wdXAgfHwgJCh0aGlzKS5hdHRyKCdkYXRhLXBvcHVwJyk7IC8vINCh0L7Qt9C00LDQtdC8INGC0LjQv9CwIGNhbGxiYWNrXG5cbiAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdwb3B1cC5vcGVuJywgWyRwb3BVcERhdGVdKTtcbiAgICAgICAgdmFyICRwb3BVcERhdGUgPSAkKCcuYi1wb3B1cFtkYXRhLXBvcHVwPVxcJycgKyBwb3B1cCArICdcXCddJyk7IC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQtdGB0YLRjCDQu9C4INC90LDQvCDRh9GC0L4g0L7RgtC60YDRi9GC0YxcblxuICAgICAgICBpZiAoJHBvcFVwRGF0ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC+0L/QtdGA0LDRhtC40L7QvdC90YPRjiDRgdC40YHRgtC10LzRgyDQvdCwIFdpbiDQuCDQodC60YDQvtC70LtcbiAgICAgICAgICBpZiAod2luZG93c09TICYmIGdldFNjcm9sbCgnSGVpZ2h0JywgJy5iLXBhZ2Utd3JhcHBlcicpKSB7XG4gICAgICAgICAgICAkcGFnZS5hZGRDbGFzcygnd2luZG93cycpO1xuICAgICAgICAgIH0gLy8g0JfQsNC60YDRi9Cy0LDQtdC8INC/0LXRgNC10LQg0L7RgtC60YDRi9GC0LjQvNC1INC00YDRg9Cz0LjQtVxuXG5cbiAgICAgICAgICAkcG9wVXAucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAkcG9wVXAuZmFkZU91dCgzMDApO1xuICAgICAgICAgICRwYWdlLmFkZENsYXNzKCduby1zY3JvbGwgbm8tdG91Y2gnKTtcbiAgICAgICAgICAkcG9wVXBEYXRlLmFkZENsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgJHBvcFVwRGF0ZS5jc3MoJ2Rpc3BsYXknLCAnZmxleCcpLmhpZGUoKS5mYWRlSW4oMzAwKTtcblxuICAgICAgICAgIGlmICgkcG9wVXBEYXRlLmZpbmQoJy5qcy1wcmVsb2FkZXInKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICRwb3BVcERhdGUuZmluZCgnLmpzLXByZWxvYWRlcicpLnNob3coKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9wZW5Qb3BVcCgnc2lnbkluJyk7XG4gICAgICB9LCAxMDAwMCk7IC8vINCa0LvQuNC6INC/0L4g0JfQsNC60YDRi9GC0LjRjiDQv9C+0L/QkNC/0L7QslxuXG4gICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmpzLWNsb3NlLXBvcHVwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjbG9zZVBvcFVwKCk7XG5cbiAgICAgICAgaWYgKCQoJy5qcy1tZW51LWluLXBvcHVwLWJhY2snKS5sZW5ndGgpIHtcbiAgICAgICAgICAkKCcuanMtbWVudS1pbi1wb3B1cC1iYWNrJykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vINCW0LzRj9C6INC/0L4gRXNjXG5cbiAgICAgICQoZG9jdW1lbnQpLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyNykge1xuICAgICAgICAgIGNsb3NlUG9wVXAoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAkKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkcG9wVXAuaGFzQ2xhc3MoJ29wZW4nKSkge1xuICAgICAgICAgIC8vINCa0LvQuNC6INC90LUg0L/QviDQmtC+0L3RgtC10L3RgtGDINC4INC90LUg0LXQs9C+INC00L7Rh9C60LDQvFxuICAgICAgICAgIGlmICghJHBvcFVwQ29udGVudC5pcyhlLnRhcmdldCkgJiYgJHBvcFVwQ29udGVudC5oYXMoZS50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2xvc2VQb3BVcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh3aW5kb3dzT1MgJiYgZ2V0U2Nyb2xsKCdIZWlnaHQnLCAnLmItcGFnZS13cmFwcGVyJykpIHtcbiAgICAgICAgJHBhZ2UuYWRkQ2xhc3MoJ3dpbmRvd3MnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwYWdlID0gJCgnLmItcGFnZS13cmFwcGVyJyk7XG4gICAgICB2YXIgaGVhZGVyID0gJCgnLmpzLWhlYWRlcicpO1xuICAgICAgdmFyIGxvZ29NYWluID0gJCgnLmpzLWxvZ28nKTtcbiAgICAgIHZhciBsb2dvSGVhZGVyID0gJCgnLmpzLWxvZ28taGVhZGVyJyk7XG4gICAgICBpZiAobG9nb01haW4ubGVuZ3RoKSAkcGFnZS5vbignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5zY3JvbGxUb3AoKSA+IGxvZ29NYWluLm9mZnNldCgpLnRvcCArIGxvZ29NYWluLm91dGVySGVpZ2h0KCkgLyAzIC0gaGVhZGVyLm91dGVySGVpZ2h0KCkpIHtcbiAgICAgICAgICBoZWFkZXIuYWRkQ2xhc3MoJ2ZpeGVkJyk7XG4gICAgICAgICAgbG9nb01haW4uYWRkKGxvZ29IZWFkZXIpLmFkZENsYXNzKCdhbmltYXRlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGVhZGVyLnJlbW92ZUNsYXNzKCdmaXhlZCcpO1xuICAgICAgICAgIGxvZ29NYWluLmFkZChsb2dvSGVhZGVyKS5yZW1vdmVDbGFzcygnYW5pbWF0ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgJCgnLmpzLXNlbGVjdCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgc2VsZWN0UGxhY2Vob2xkZXIgPSAkdGhpcy5hdHRyKCdkYXRhLXBsYWNlaG9sZGVyJyk7XG4gICAgICAgICR0aGlzLnNlbGVjdDIoe1xuICAgICAgICAgIHBsYWNlaG9sZGVyOiBzZWxlY3RQbGFjZWhvbGRlcixcbiAgICAgICAgICBkcm9wZG93bkF1dG9XaWR0aDogdHJ1ZSxcbiAgICAgICAgICBkcm9wZG93blBhcmVudDogJHRoaXMucGFyZW50cygnLmItc2VsZWN0JylcbiAgICAgICAgfSk7XG4gICAgICAgICR0aGlzLnNpYmxpbmdzKCcuanMtc2VsZWN0LWxhYmVsJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICR0aGlzLnNlbGVjdDIoJ29wZW4nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG5cbiAgICBmdW5jdGlvbiBzbGlkZXJzQXJyb3dBbmltYXRlKHByZXZBcnJvdywgbmV4dEFycm93KSB7XG4gICAgICB2YXIgaHRtbCA9ICQoJ2h0bWwnKTtcblxuICAgICAgZnVuY3Rpb24gYXJyb3dab29tSW4oKSB7XG4gICAgICAgICQodGhpcykuc2libGluZ3MoKS5hZGRDbGFzcygnc21hbGwnKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXJyb3dab29tT3V0KCkge1xuICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ3NtYWxsJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChodG1sLmhhc0NsYXNzKCduby10b3VjaGV2ZW50cycpKSB7XG4gICAgICAgIHByZXZBcnJvdy5hZGQobmV4dEFycm93KS5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhcnJvd1pvb21Jbi5jYWxsKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJldkFycm93LmFkZChuZXh0QXJyb3cpLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFycm93Wm9vbU91dC5jYWxsKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXZBcnJvdy5hZGQobmV4dEFycm93KS5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhcnJvd1pvb21Jbi5jYWxsKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJldkFycm93LmFkZChuZXh0QXJyb3cpLm9uKCd0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhcnJvd1pvb21PdXQuY2FsbCh0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCQoJy5qcy1zbGlkZXItZ2FsbGVyeScpLmxlbmd0aCkge1xuICAgICAgJCgnLmpzLXNsaWRlci1nYWxsZXJ5JykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkc2xpZGVyID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRvdHNXcmFwID0gJHNsaWRlci5wYXJlbnQoKS5maW5kKCcuanMtc2xpZGVyLWRvdHMnKTtcbiAgICAgICAgdmFyIGRvdHMgPSB2b2lkIDA7XG4gICAgICAgIHZhciBhY3RpdmVEb3QgPSB2b2lkIDA7XG5cbiAgICAgICAgZnVuY3Rpb24gc2Nyb2xsRG90cyhuZXh0U2xpZGUpIHtcbiAgICAgICAgICBhY3RpdmVEb3QgPSBkb3RzLmZpbmQoXCJbZGF0YS1pZD1cIiArIG5leHRTbGlkZSArIFwiXVwiKTtcbiAgICAgICAgICB2YXIgdG9wID0gZG90cy5maW5kKCdbZGF0YS1pZD1cIjBcIl0nKVswXS5vZmZzZXRXaWR0aDtcblxuICAgICAgICAgIGlmIChhY3RpdmVEb3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBkb3RzLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVkoLScgKyB0b3AgKiBuZXh0U2xpZGUgKyAncHgpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJHNsaWRlci5vbignaW5pdCByZWluaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZG90cyA9IGRvdHNXcmFwLmZpbmQoJy5nYWxsZXJ5LWRvdHMnKTtcbiAgICAgICAgICBzY3JvbGxEb3RzKDApO1xuICAgICAgICB9KTtcbiAgICAgICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICByb3dzOiAwLFxuICAgICAgICAgIGFzTmF2Rm9yOiAnLmpzLXNsaWRlci1kZXNjcmlwdGlvbnMnLFxuICAgICAgICAgIHRvdWNoTW92ZTogZmFsc2UsXG4gICAgICAgICAgc3dpcGU6IGZhbHNlLFxuICAgICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgICBhcHBlbmREb3RzOiBkb3RzV3JhcCxcbiAgICAgICAgICBkb3RzQ2xhc3M6ICdnYWxsZXJ5LWRvdHMnLFxuICAgICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICBmYWRlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfV1cbiAgICAgICAgfSk7XG4gICAgICAgICRzbGlkZXIub24oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uIChldmVudCwgc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XG4gICAgICAgICAgc2Nyb2xsRG90cyhuZXh0U2xpZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICgkKCcuanMtc2xpZGVyLWRlc2NyaXB0aW9ucycpLmxlbmd0aCkge1xuICAgICAgJCgnLmpzLXNsaWRlci1kZXNjcmlwdGlvbnMnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRzbGlkZXIgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgcHJldkFycm93ID0gJHNsaWRlci5wYXJlbnQoKS5maW5kKCcuanMtc2xpZGVyLWFycm93LXByZXYnKTtcbiAgICAgICAgdmFyIG5leHRBcnJvdyA9ICRzbGlkZXIucGFyZW50KCkuZmluZCgnLmpzLXNsaWRlci1hcnJvdy1uZXh0Jyk7XG4gICAgICAgIHZhciAkZG90cyA9ICRzbGlkZXIucGFyZW50KCkuZmluZCgnLmpzLWRlc2NyaXB0aW9uLWRvdHMnKTtcblxuICAgICAgICBmdW5jdGlvbiBvcHRpbWl6ZVNsaWRlc0hlaWdodCgpIHtcbiAgICAgICAgICB2YXIgJHNsaWRlcyA9ICRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG4gICAgICAgICAgdmFyIG1heEhlaWdodCA9IDA7XG4gICAgICAgICAgJHNsaWRlcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzbGlkZUhlaWdodCA9IDA7XG4gICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNsaWRlSGVpZ2h0ID0gc2xpZGVIZWlnaHQgKyAkKHRoaXMpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChzbGlkZUhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICAgICAgICBtYXhIZWlnaHQgPSBzbGlkZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkc2xpZGVzLmhlaWdodChtYXhIZWlnaHQpO1xuICAgICAgICB9IC8vIGZ1bmN0aW9uIGdhbGxlcnlEb3RzQW5pbWF0ZSAoZSkge1xuICAgICAgICAvLyAgICAgbGV0IG5leHRTbGlkZTtcbiAgICAgICAgLy8gICAgIGxldCBnYWxsZXJ5ZG90cyA9ICQoJy5qcy1zbGlkZXItZ2FsbGVyeScpLnBhcmVudCgpLmZpbmQoJy5nYWxsZXJ5LWRvdHMnKTtcbiAgICAgICAgLy8gICAgICQoJy5qcy1zbGlkZXItZ2FsbGVyeSAuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgLy8gICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2xpY2stYWN0aXZlJykpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKCQoZS5kZWxlZ2F0ZVRhcmdldCkuaGFzQ2xhc3MoJ2pzLXNsaWRlci1hcnJvdy1uZXh0JykpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIG5leHRTbGlkZSA9IGkgKyAxO1xuICAgICAgICAvLyAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgbmV4dFNsaWRlID0gaSAtIDE7XG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2cobmV4dFNsaWRlLCAkKGdhbGxlcnlkb3RzLmZpbmQoJ2xpJylbbmV4dFNsaWRlXSkucG9zaXRpb24oKS50b3ApXG4gICAgICAgIC8vICAgICBnYWxsZXJ5ZG90cy5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVZKC0nICsgJChnYWxsZXJ5ZG90cy5maW5kKCdsaScpW25leHRTbGlkZV0pLnBvc2l0aW9uKCkudG9wICsgJ3B4KScpXG4gICAgICAgIC8vIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIGNpcmNsZUFuaW1hdGUoKSB7XG4gICAgICAgICAgJCgnLmpzLXNsaWRlci1nYWxsZXJ5JykuYWRkQ2xhc3MoJ2FuaW1hdGUnKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoJy5qcy1zbGlkZXItZ2FsbGVyeScpLnJlbW92ZUNsYXNzKCdhbmltYXRlJyk7XG4gICAgICAgICAgfSwgNTEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzbGlkZXIub24oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uIChldmVudCwgc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XG4gICAgICAgICAgJGRvdHMucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICRkb3RzLmZpbHRlcignW2RhdGEtc2xpZGU9XCInICsgbmV4dFNsaWRlICsgJ1wiXScpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoJy5qcy1zbGlkZXItZGVzY3JpcHRpb25zJykuc2xpY2soe1xuICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcbiAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgcHJldkFycm93OiBwcmV2QXJyb3csXG4gICAgICAgICAgbmV4dEFycm93OiBuZXh0QXJyb3csXG4gICAgICAgICAgdmVydGljYWw6IHRydWUsXG4gICAgICAgICAgcm93czogMCxcbiAgICAgICAgICBhc05hdkZvcjogJy5qcy1zbGlkZXItZ2FsbGVyeScsXG4gICAgICAgICAgdG91Y2hNb3ZlOiBmYWxzZSxcbiAgICAgICAgICBzd2lwZTogZmFsc2UsXG4gICAgICAgICAgaW5pdGlhbFNsaWRlOiAwXG4gICAgICAgIH0pO1xuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgb3B0aW1pemVTbGlkZXNIZWlnaHQoKTtcbiAgICAgICAgICAkc2xpZGVyLnNsaWNrKCdzbGlja0dvVG8nLCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgb3B0aW1pemVTbGlkZXNIZWlnaHQpO1xuICAgICAgICAkZG90cy5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG5leHRTbGlkZSA9ICQodGhpcykuZGF0YSgnc2xpZGUnKTtcbiAgICAgICAgICAkc2xpZGVyLnNsaWNrKCdzbGlja0dvVG8nLCBuZXh0U2xpZGUsIGZhbHNlKTtcbiAgICAgICAgICBjaXJjbGVBbmltYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwcmV2QXJyb3cuYWRkKG5leHRBcnJvdykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLyBnYWxsZXJ5RG90c0FuaW1hdGUoZSk7XG4gICAgICAgICAgY2lyY2xlQW5pbWF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2xpZGVyc0Fycm93QW5pbWF0ZShwcmV2QXJyb3csIG5leHRBcnJvdyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkKCcuanMtcGhvdG8tY2FyZC1zbGlkZXInKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkc2xpZGVyID0gJCh0aGlzKTtcbiAgICAgIHZhciBwcmV2QXJyb3cgPSAkc2xpZGVyLnBhcmVudCgpLmZpbmQoJy5qcy1zbGlkZXItYXJyb3ctcHJldicpO1xuICAgICAgdmFyIG5leHRBcnJvdyA9ICRzbGlkZXIucGFyZW50KCkuZmluZCgnLmpzLXNsaWRlci1hcnJvdy1uZXh0Jyk7XG4gICAgICAkc2xpZGVyLnNsaWNrKHtcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgcHJldkFycm93OiBwcmV2QXJyb3csXG4gICAgICAgIG5leHRBcnJvdzogbmV4dEFycm93LFxuICAgICAgICByb3dzOiAyLFxuICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBicmVha3BvaW50OiAxNDM5LFxuICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYnJlYWtwb2ludDogMTY3OSxcbiAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNFxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH0pO1xuICAgICAgc2xpZGVyc0Fycm93QW5pbWF0ZShwcmV2QXJyb3csIG5leHRBcnJvdyk7XG4gICAgfSk7XG4gICAgJCgnLmpzLXRyYWluZXItc2xpZGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNsaWRlciA9ICQodGhpcyk7XG4gICAgICB2YXIgcHJldkFycm93ID0gJHNsaWRlci5wYXJlbnQoKS5maW5kKCcuanMtc2xpZGVyLWFycm93LXByZXYnKTtcbiAgICAgIHZhciBuZXh0QXJyb3cgPSAkc2xpZGVyLnBhcmVudCgpLmZpbmQoJy5qcy1zbGlkZXItYXJyb3ctbmV4dCcpO1xuICAgICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgIHByZXZBcnJvdzogcHJldkFycm93LFxuICAgICAgICBuZXh0QXJyb3c6IG5leHRBcnJvdyxcbiAgICAgICAgcm93czogMyxcbiAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYnJlYWtwb2ludDogMTAyMyxcbiAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNFxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH0pO1xuICAgICAgc2xpZGVyc0Fycm93QW5pbWF0ZShwcmV2QXJyb3csIG5leHRBcnJvdyk7XG4gICAgfSk7XG4gICAgJCgnLmpzLWdhbGxlcnktc2xpZGVyJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNsaWRlciA9ICQodGhpcyk7XG4gICAgICB2YXIgcHJldkFycm93ID0gJHNsaWRlci5wYXJlbnQoKS5maW5kKCcuanMtc2xpZGVyLWFycm93LXByZXYnKTtcbiAgICAgIHZhciBuZXh0QXJyb3cgPSAkc2xpZGVyLnBhcmVudCgpLmZpbmQoJy5qcy1zbGlkZXItYXJyb3ctbmV4dCcpO1xuICAgICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgIHByZXZBcnJvdzogcHJldkFycm93LFxuICAgICAgICBuZXh0QXJyb3c6IG5leHRBcnJvdyxcbiAgICAgICAgcm93czogMCxcbiAgICAgICAgaW5pdGlhbFNsaWRlOiAwXG4gICAgICB9KTtcbiAgICAgIHNsaWRlcnNBcnJvd0FuaW1hdGUocHJldkFycm93LCBuZXh0QXJyb3cpO1xuICAgIH0pO1xuICAgICQoJy5qcy1uZXdzLXNsaWRlcicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzbGlkZXIgPSAkKHRoaXMpO1xuICAgICAgdmFyIHByZXZBcnJvdyA9ICRzbGlkZXIucGFyZW50KCkuZmluZCgnLmpzLXNsaWRlci1hcnJvdy1wcmV2Jyk7XG4gICAgICB2YXIgbmV4dEFycm93ID0gJHNsaWRlci5wYXJlbnQoKS5maW5kKCcuanMtc2xpZGVyLWFycm93LW5leHQnKTtcbiAgICAgICRzbGlkZXIuc2xpY2soe1xuICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcbiAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICBwcmV2QXJyb3c6IHByZXZBcnJvdyxcbiAgICAgICAgbmV4dEFycm93OiBuZXh0QXJyb3csXG4gICAgICAgIHJvd3M6IDEsXG4gICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgaW5pdGlhbFNsaWRlOiAwXG4gICAgICB9KS5vbignYmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24gKGV2ZW50LCBzbGljaywgY3VycmVudFNsaWRlLCBuZXh0U2xpZGUpIHtcbiAgICAgICAgdmFyICRudW0gPSAkc2xpZGVyLnNpYmxpbmdzKCcuYi1uZXdzLWNhcmRzX19hcnJvd3MnKS5maW5kKCcuanMtY3VycmVudC1zbGlkZScpO1xuICAgICAgICAkbnVtLnRleHQobmV4dFNsaWRlICsgMSk7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlcnNBcnJvd0FuaW1hdGUocHJldkFycm93LCBuZXh0QXJyb3cpO1xuICAgIH0pO1xuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICQoJy5qcy10YWItdHJpZ2dlcicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRhYiA9ICQodGhpcykucGFyZW50cygnLmpzLXRhYicpO1xuICAgICAgICB2YXIgaWQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtdGFiJyk7XG4gICAgICAgIHZhciBjb250ZW50ID0gJCgnLmpzLXRhYi1jb250ZW50W2RhdGEtdGFiPVwiJyArIGlkICsgJ1wiXScpO1xuICAgICAgICB0YWIuZmluZCgnLmpzLXRhYi10cmlnZ2VyLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRhYi5maW5kKCcuanMtdGFiLWNvbnRlbnQuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICBjb250ZW50LmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgY2hhbmdlVGFiU3RhdHVzKCk7XG4gICAgICB9KTtcbiAgICAgIGNoYW5nZVRhYlN0YXR1cygpO1xuXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VUYWJTdGF0dXMoKSB7XG4gICAgICAgICQoJy5qcy10YWItc3RhdHVzJykudGV4dCgn0JLRi9Cx0YDQsNGC0YwnKTtcbiAgICAgICAgJCgnLmpzLXRhYi10cmlnZ2VyLmFjdGl2ZScpLmZpbmQoJy5qcy10YWItc3RhdHVzJykudGV4dCgn0JLRi9Cx0YDQsNC90L4nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIFNFVFRJTkdTID0ge1xuICAgICAgICBpZ25vcmU6ICcuaWdub3JlLCBbdHlwZT1cImhpZGRlblwiXSdcbiAgICAgIH07XG4gICAgICAkLnZhbGlkYXRvci5zZXREZWZhdWx0cyh7XG4gICAgICAgIGRlYnVnOiB0cnVlXG4gICAgICB9KTtcbiAgICAgICQuZXh0ZW5kKCQudmFsaWRhdG9yLm1lc3NhZ2VzLCB7XG4gICAgICAgIHJlcXVpcmVkOiBcItCt0YLQviDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LVcIixcbiAgICAgICAgZW1haWw6IFwi0J3QtdCy0LXRgNC90YvQuSDRhNC+0YDQvNCw0YIg0LTQsNC90L3Ri9GFXCIsXG4gICAgICAgIHRlbDogXCLQndC10LLQtdGA0L3Ri9C5INGE0L7RgNC80LDRgiDQtNCw0L3QvdGL0YVcIixcbiAgICAgICAgLy8gdXJsOiAn0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC60L7RgNGA0LXQutGC0L3Ri9C5IFVSTC4nLFxuICAgICAgICBkYXRlOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQutC+0YDRgNC10LrRgtC90YPRjiDQtNCw0YLRgy5cIixcbiAgICAgICAgbnVtYmVyOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDRh9C40YHQu9C+LlwiLFxuICAgICAgICAvLyBkaWdpdHM6ICfQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC+0LTQuNGC0LUg0YLQvtC70YzQutC+INGG0LjRhNGA0YsuJyxcbiAgICAgICAgLy8gY3JlZGl0Y2FyZDogJ9Cf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQv9GA0LDQstC40LvRjNC90YvQuSDQvdC+0LzQtdGAINC60YDQtdC00LjRgtC90L7QuSDQutCw0YDRgtGLLicsXG4gICAgICAgIGVxdWFsVG86IFwi0J/QsNGA0L7Qu9C4INC90LUg0YHQvtCy0L/QsNC00LDRjtGCXCIgLy9tYXhsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCgn0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC90LUg0LHQvtC70YzRiNC1IHswfSDRgdC40LzQstC+0LvQvtCyLicpLFxuICAgICAgICAvLyBtaW5sZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCgn0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC90LUg0LzQtdC90YzRiNC1IHswfSDRgdC40LzQstC+0LvQvtCyLicpLFxuICAgICAgICAvLyByYW5nZWxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCfQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0LfQvdCw0YfQtdC90LjQtSDQtNC70LjQvdC+0Lkg0L7RgiB7MH0g0LTQviB7MX0g0YHQuNC80LLQvtC70L7Qsi4nKSxcbiAgICAgICAgLy8gcmFuZ2U6ICQudmFsaWRhdG9yLmZvcm1hdCgn0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INGH0LjRgdC70L4g0L7RgiB7MH0g0LTQviB7MX0uJyksXG4gICAgICAgIC8vIG1heDogJC52YWxpZGF0b3IuZm9ybWF0KCfQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0YfQuNGB0LvQviwg0LzQtdC90YzRiNC10LUg0LjQu9C4INGA0LDQstC90L7QtSB7MH0uJyksXG4gICAgICAgIC8vIG1pbjogJC52YWxpZGF0b3IuZm9ybWF0KCfQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0YfQuNGB0LvQviwg0LHQvtC70YzRiNC10LUg0LjQu9C4INGA0LDQstC90L7QtSB7MH0uJylcblxuICAgICAgfSk7XG4gICAgICAkLnZhbGlkYXRvci5hZGRNZXRob2QoXCJtYXgtbGVuZ3RoXCIsIGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCwgcGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPD0gcGFyYW1zO1xuICAgICAgfSwgXCLQktCy0LXQtNC40YLQtSDQvdC1INCx0L7Qu9C10LUgMTQwINGB0LjQvNCy0L7Qu9C+0LJcIik7XG4gICAgICAkLnZhbGlkYXRvci5hZGRNZXRob2QoXCJqcy1yZWdleFwiLCBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoZWxlbWVudCkgfHwgL15bYS16QS1a0LAt0Y/QkC3Qr9CB0ZEgXSskLy50ZXN0KHZhbHVlKTtcbiAgICAgIH0sIFwi0KLQvtC70YzQutC+INCx0YPQutCy0YtcIik7XG4gICAgICAkLnZhbGlkYXRvci5hZGRNZXRob2QoXCJqcy10ZWwtaW5wdXRcIiwgZnVuY3Rpb24gKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciB2YWwgPSB2YWx1ZS5zcGxpdChcIiBcIikuam9pbihcIlwiKS5zcGxpdChcIitcIikuam9pbihcIlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoZWxlbWVudCkgfHwgdmFsLmxlbmd0aCA9PSAxMTtcbiAgICAgIH0sIFwi0JLQstC10LTQuNGC0LUg0L3QvtC80LXRgFwiKTtcbiAgICAgIHZhciBjaGVja2luZztcbiAgICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcImpzLXJlbW90ZS1lbWFpbFwiLCBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlzU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogJChcIltkYXRhLXJlbW90ZS1lbWFpbF1cIikuZGF0YShcInJlbW90ZS1lbWFpbFwiKSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKG1zZykge1xuICAgICAgICAgICAgaXNTdWNjZXNzID0gbXNnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpc1N1Y2Nlc3M7XG4gICAgICB9LCBcIkUtbWFpbCDRg9C20LUg0LfQsNC90Y/RglwiKTtcbiAgICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcImpzLXJlbW90ZS1waG9uZVwiLCBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlzU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogJChlbGVtZW50KS5kYXRhKFwicmVtb3RlLXBob25lXCIpLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MobXNnKSB7XG4gICAgICAgICAgICBpc1N1Y2Nlc3MgPSBtc2c7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGlzU3VjY2VzcztcbiAgICAgIH0sIFwi0KLQtdC70LXRhNC+0L0g0YPQttC1INC30LDQvdGP0YJcIik7XG4gICAgICAkLnZhbGlkYXRvci5hZGRNZXRob2QoXCJtYXgtbWVzc2FnZVwiLCBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoZWxlbWVudCkgfHwgLyg/PS4qWzAtOV0pKD89LipbYS16XSkoPz0uKltBLVpdKVswLTlhLXpBLVohQCMkJV4mKl17Nix9L2kudGVzdCh2YWx1ZSk7XG4gICAgICB9LCBcItCf0LDRgNC+0LvRjCDQtNC+0LvQttC10L0g0YHQvtC00LXRgNC20LDRgtGMINC90LUg0LzQtdC90LXQtSA2INGB0LjQvNCy0L7Qu9C+0LIsINCyINGC0L7QvCDRh9C40YHQu9C1INGG0LjRhNGA0Ysg0Lgg0LHRg9C60LLRiyDQu9Cw0YLQuNC90YHQutC+0LPQviDQsNC70YTQsNCy0LjRgtCwXCIpO1xuICAgICAgJC52YWxpZGF0b3IuYWRkTWV0aG9kKFwianMtcmVtb3RlLXN1YnNjcmliZVwiLCBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlzU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogJChlbGVtZW50KS5kYXRhKFwicmVtb3RlLXN1YnNjcmliZVwiKSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFzeW5jOiBmYWxzZSxcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKG1zZykge1xuICAgICAgICAgICAgaXNTdWNjZXNzID0gbXNnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpc1N1Y2Nlc3M7XG4gICAgICB9LCBcItCU0LDQvdC90YvQuSBFLW1haWwg0YPQttC1INGD0YfQsNGB0YLQstGD0LXRgiDQsiDRgNCw0YHRgdGL0LvQutC1XCIpO1xuICAgICAgJC52YWxpZGF0b3IuYWRkTWV0aG9kKFwiZmlsZXJlcWlyZWRcIiwgZnVuY3Rpb24gKHZhbHVlLCBlbGVtZW50LCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuICQoZWxlbWVudCkuYXR0cihcInR5cGVcIikgPT09IFwiZmlsZVwiICYmIGVsZW1lbnQuZmlsZXMgJiYgZWxlbWVudC5maWxlcy5sZW5ndGg7XG4gICAgICB9LCBcItCk0LDQudC7INC90LUg0LTQvtCx0LDQstC70LXQvVwiKTtcbiAgICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcImV4dGVuc2lvblwiLCBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnQsIHBhcmFtKSB7XG4gICAgICAgIHBhcmFtID0gdHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiID8gcGFyYW0ucmVwbGFjZSgvLC9nLCBcInxcIikgOiBcInBuZ3xqcGU/Z3xnaWZcIjtcblxuICAgICAgICBpZiAoJChlbGVtZW50KS5hdHRyKFwidHlwZVwiKSA9PT0gXCJmaWxlXCIgJiYgZWxlbWVudC5maWxlcyAmJiBlbGVtZW50LmZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5maWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoZWxlbWVudCkgfHwgZWxlbWVudC5maWxlc1tpXS5uYW1lLm1hdGNoKG5ldyBSZWdFeHAoXCJcXFxcLihcIiArIHBhcmFtICsgXCIpJFwiLCBcImlcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSwgJC52YWxpZGF0b3IuZm9ybWF0KFwiXCIpKTtcbiAgICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcIm1heHNpemVcIiwgZnVuY3Rpb24gKHZhbHVlLCBlbGVtZW50LCBwYXJhbSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25hbChlbGVtZW50KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW0gPSBwYXJhbSAqIDEwMjQ7XG5cbiAgICAgICAgaWYgKCQoZWxlbWVudCkuYXR0cihcInR5cGVcIikgPT09IFwiZmlsZVwiICYmIGVsZW1lbnQuZmlsZXMgJiYgZWxlbWVudC5maWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQuZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmZpbGVzW2ldLnNpemUgPD0gcGFyYW07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LCBcIlwiKTtcbiAgICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcImVudGVyLWVtYWlsXCIsIGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25hbChlbGVtZW50KSB8fCAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLy50ZXN0KHZhbHVlKSB8fCAvXihcXCs3fDd8OCk/W1xcc1xcLV0/XFwoP1s0ODldWzAtOV17Mn1cXCk/W1xcc1xcLV0/WzAtOV17M31bXFxzXFwtXT9bMC05XXsyfVtcXHNcXC1dP1swLTldezJ9JC8udGVzdCh2YWx1ZSk7XG4gICAgICB9LCBcItCd0LXQstC10YDQvdGL0Lkg0YTQvtGA0LzQsNGCINC00LDQvdC90YvRhVwiKTtcbiAgICAgICQoXCJib2R5XCIpLm9uKFwiaW5pdFZhbGlkYXRpb25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKFwiLmpzLWZvcm0tdmFsaWRhdGVcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgICB2YXIgbG9jYWxTZXR0aW5ncyA9IHt9O1xuICAgICAgICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKGxvY2FsU2V0dGluZ3MsIFNFVFRJTkdTKTtcblxuICAgICAgICAgIGlmICgkdGhpcy5kYXRhKFwiZXJyb3Itc2VsZWN0b3JcIikpIHtcbiAgICAgICAgICAgIHNldHRpbmdzLmVycm9yTGFiZWxDb250YWluZXIgPSAkdGhpcy5kYXRhKFwiZXJyb3Itc2VsZWN0b3JcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHZhbGlkYXRvciA9ICR0aGlzLnZhbGlkYXRlKHNldHRpbmdzKTtcbiAgICAgICAgICB2YXIgJHJlbW90ZSA9ICR0aGlzLmZpbmQoXCJpbnB1dC5qcy1yZW1vdGUtc3Vic2NyaWJlLCBpbnB1dC5qcy1yZW1vdGUtdXNlciwgaW5wdXQuanMtcmVtb3RlLXBob25lLCBpbnB1dC5qcy1yZW1vdGUtZW1haWwgaW5wdXQuanMtdGVsLWlucHV0XCIpO1xuICAgICAgICAgICRyZW1vdGUub24oXCJrZXlkb3duXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgICAgICAkdGhpcy5hZGRDbGFzcyhcImlnbm9yZVwiKTtcbiAgICAgICAgICB9KS5vbihcImtleXVwXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChjaGVja2luZyk7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGNoZWNraW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICRyZW1vdGUucmVtb3ZlQ2xhc3MoXCJpZ25vcmVcIik7XG4gICAgICAgICAgICAgIHZhbGlkYXRvci5lbGVtZW50KF90aGlzKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCR0aGlzLmZpbmQoJy5qcy1kcm9wLXpvbmUnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5vbignZHJhZ0NoYW5nZVZhbGlkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YWxpZGF0b3IuZWxlbWVudCgkdGhpcy5maW5kKCcuanMtZHJvcC16b25lJykuZmluZCgnaW5wdXQnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkdGhpcy5vbihcInJlc2V0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFsaWRhdG9yLnJlc2V0Rm9ybSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICR0aGlzLm9uKFwic3VibWl0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRvci5udW1iZXJPZkludmFsaWRzKCkgPiAwKSB7XG4gICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAkdGhpcy5hZGRDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciAkZm9ybSA9ICR0aGlzO1xuICAgICAgICAgICAgICB2YXIgdXJsID0gJGZvcm0uYXR0cihcImFjdGlvblwiKSB8fCBsb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gJGZvcm0uYXR0cihcIm1ldGhvZFwiKTtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gJGZvcm0uZGF0YShcImV2ZW50XCIpO1xuICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoJHRoaXNbMF0pO1xuXG4gICAgICAgICAgICAgIGlmICgkZm9ybS5oYXNDbGFzcygnanMtcmVzdW1lLWZvcm0nKSkge1xuICAgICAgICAgICAgICAgICQoJy5iLXBhZ2Utd3JhcHBlcicpLmFkZENsYXNzKCduby1zY3JvbGwgbm8tdG91Y2gnKTtcbiAgICAgICAgICAgICAgICAkKCcuYi1wb3B1cFtkYXRhLXBvcHVwPVxcJ3Jlc3VtZVN1Y2Nlc3NcXCcnKS5hZGRDbGFzcygnb3BlbicpO1xuICAgICAgICAgICAgICAgICQoJy5iLXBvcHVwW2RhdGEtcG9wdXA9XFwncmVzdW1lU3VjY2Vzc1xcJycpLmNzcygnZGlzcGxheScsICdmbGV4JykuaGlkZSgpLmZhZGVJbigzMDApO1xuICAgICAgICAgICAgICAgICRmb3JtLmZpbmQoJy5qcy1kcm9wLXpvbmUnKS5maW5kKCdpbnB1dCcpLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgJGZvcm0uZmluZCgnLmRyb3Atem9uZS1maWxlJykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJGZvcm0uZmluZCgnLmpzLWRyb3Atem9uZS1tZXNzYWdlJykuaGFzQ2xhc3MoJ2hpZGRlbicpKSB7XG4gICAgICAgICAgICAgICAgICAkZm9ybS5maW5kKCcuanMtZHJvcC16b25lLW1lc3NhZ2UnKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCRmb3JtLmhhc0NsYXNzKCdqcy1mZWVkYmFjay1mb3JtJykpIHtcbiAgICAgICAgICAgICAgICAkKCcuanMtZmVlZGJhY2stZm9ybScpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkKCcuanMtZmVlZGJhY2stc3VjY2VzcycpLmNzcygnZGlzcGxheScsICdmbGV4JykuaGlkZSgpLmZhZGVJbigzMDApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgJHRoaXMucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwID0gJChcImRpdltkYXRhLXBvcHVwfj0nc3VjY2VzcyddXCIpO1xuICAgICAgICAgICAgICAgICAgcG9wdXAuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICAgICR0aGlzWzBdLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5hdHRyKCdkYXRhLWxpbmsnKSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICR0aGlzLmF0dHIoJ2RhdGEtbGluaycpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwID0gJChcImRpdltkYXRhLXBvcHVwfj0nZXJyb3InXVwiKTtcbiAgICAgICAgICAgICAgICAgIHBvcHVwLmFkZENsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgICAkdGhpc1swXS5yZXNldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJCgnLmpzLXNlbGVjdCcpLm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhbGlkYXRvci5lbGVtZW50KHRoaXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgJChcImJvZHlcIikudHJpZ2dlcihcImluaXRWYWxpZGF0aW9uXCIpO1xuICAgIH0pO1xuICAgIDtcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGNpcmNsZSA9ICQoJy5qcy1jdXJzb3ItY2lybGNlJyk7XG4gICAgICAkKCcuanMtYW5pbWF0ZS1jdXJzb3InKS5vbignbW91c2VlbnRlciBtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpOyAvLyBOQiEg0LrQvtC+0YDQtNC40L3QsNGC0Ysg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INCy0LjQtNC40LzQvtC5INGH0LDRgdGC0Lgg0L7QutC90LBcbiAgICAgICAgLy8g0L7Qv9GA0LXQtNC10LvRj9C10Lwg0YbQtdC90YLRgCDQutGA0YPQs9CwXG5cbiAgICAgICAgdmFyIHggPSAkdGhpcy5vZmZzZXQoKS5sZWZ0ICsgJGNpcmNsZS53aWR0aCgpIC8gMjtcbiAgICAgICAgdmFyIHkgPSAkdGhpcy5vZmZzZXQoKS50b3AgKyAkY2lyY2xlLmhlaWdodCgpIC8gMjsgLy8g0L7Qv9GA0LXQtNC10LvRj9C10Lwg0L/QvtC70L7QttC10L3QuNC1INC60YPRgNGB0LDRgNCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDRhtC10L3RgtGA0LBcblxuICAgICAgICB2YXIgZGlmZlggPSB4IC0gZS5jbGllbnRYO1xuICAgICAgICB2YXIgZGlmZlkgPSB5IC0gZS5jbGllbnRZOyAvLyDRgdC80LXRidCw0LXQvCDQutGA0YPQsyDQv9C+INC90LDQv9GA0LDQstC70LXQvdC40Y4g0Log0LrRg9GA0YHQvtGA0YNcblxuICAgICAgICB2YXIgayA9IC0wLjI7IC8vINC60L7RjdGE0YTQuNGG0LjQtdC90YIg0YHQvNC10YnQtdC90LjRjyDQt9CwINC60YPRgNGB0L7RgNC+0LxcblxuICAgICAgICAkY2lyY2xlLmNzcyh7XG4gICAgICAgICAgbGVmdDogayAqIGRpZmZYLFxuICAgICAgICAgIHRvcDogayAqIGRpZmZZXG4gICAgICAgIH0pO1xuICAgICAgfSkub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRjaXJjbGUuY3NzKHtcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHRvcDogMFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgJCgnLmpzLWFkZGl0aW9uYWwtY2FyZHMnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRjYXJkID0gJCh0aGlzKTtcbiAgICAgICAgJGNhcmQub24oJ21vdXNlZW50ZXIgbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLy0g0KHQuNC90LjQuSDQutGA0YPQs1xuICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgICAgdmFyICRiYWNrID0gJHRoaXMuZmluZCgnLmpzLWJsdWUtYmFjaycpOyAvLyDQvtC/0YDQtdC00LXQu9GP0LXQvCDQutGA0LDQuSDQutCw0YDRgtC+0YfQutC4XG5cbiAgICAgICAgICB2YXIgeCA9ICR0aGlzLm9mZnNldCgpLmxlZnQgKyAkdGhpcy53aWR0aCgpO1xuICAgICAgICAgIHZhciB5ID0gJHRoaXMub2Zmc2V0KCkudG9wO1xuICAgICAgICAgIHZhciBkYXRhTGVmdCA9ICR0aGlzLmRhdGEoJ2xlZnQnKSB8fCAwO1xuICAgICAgICAgIHZhciBkYXRhVG9wID0gJHRoaXMuZGF0YSgndG9wJykgfHwgMDsgLy8g0L7Qv9GA0LXQtNC10LvRj9C10Lwg0L/QvtC70L7QttC10L3QuNC1INC60YPRgNGB0LDRgNCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDRhtC10L3RgtGA0LBcblxuICAgICAgICAgIHZhciBkaWZmWCA9IHggLSBlLmNsaWVudFggKyBkYXRhTGVmdDtcbiAgICAgICAgICB2YXIgZGlmZlkgPSB5IC0gZS5jbGllbnRZICsgZGF0YVRvcDsgLy8g0YHQvNC10YnQsNC10Lwg0LrRgNGD0LMg0L3QsCDQv9C+0LfQuNGG0LjRjiDQutGD0YDRgdC+0YDQsFxuXG4gICAgICAgICAgJHRoaXMuZmluZCgnLmpzLWJsdWUtYmFjaycpLmNzcyh7XG4gICAgICAgICAgICByaWdodDogZGlmZlgsXG4gICAgICAgICAgICB0b3A6IC1kaWZmWVxuICAgICAgICAgIH0pOyAvLy0g0LHQtdC70LDRjyDRgtC10L3RjFxuXG4gICAgICAgICAgdmFyICRzdmcgPSAkdGhpcy5maW5kKCdzdmcnKTtcblxuICAgICAgICAgIGlmICgkc3ZnLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8g0L7Qv9GA0LXQtNC10LvRj9C10Lwg0YbQtdC90YLRgCBzdmdcbiAgICAgICAgICAgIHZhciBfeCA9ICRzdmcub2Zmc2V0KCkubGVmdCArICRzdmcud2lkdGgoKSAvIDI7XG5cbiAgICAgICAgICAgIHZhciBfeSA9ICRzdmcub2Zmc2V0KCkudG9wICsgJHN2Zy5oZWlnaHQoKSAvIDI7IC8vINC+0L/RgNC10LTQtdC70Y/QtdC8INC/0L7Qu9C+0LbQtdC90LjQtSDQutGD0YDRgdCw0YDQsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0YbQtdC90YLRgNCwXG5cblxuICAgICAgICAgICAgdmFyIF9kaWZmWCA9IF94IC0gZS5jbGllbnRYO1xuXG4gICAgICAgICAgICB2YXIgX2RpZmZZID0gX3kgLSBlLmNsaWVudFk7IC8vINC00LLQuNCz0LDQtdC8INC/0YDRj9C80L7Rg9Cz0L7Qu9GM0L3QuNC6XG5cblxuICAgICAgICAgICAgaWYgKCR0aGlzLmZpbmQoJy5qcy1tb3ZlLXN2ZycpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyDRgdC80LXRidCw0LXQvCDQv9GA0Y/QvNC+0YPQs9C+0LvRjNC90LjQuiDQvdCwINC/0L7Qt9C40YbQuNGOINC60YPRgNGB0L7RgNCwXG4gICAgICAgICAgICAgIHZhciAkYmFzZSA9ICR0aGlzLmZpbmQoJy5qcy1tb3ZlLXN2Zy1vcmlnaW5hbCcpO1xuICAgICAgICAgICAgICB2YXIgYmFzZVggPSBwYXJzZUludCgkYmFzZS5hdHRyKCd4JykpO1xuICAgICAgICAgICAgICB2YXIgYmFzZVkgPSBwYXJzZUludCgkYmFzZS5hdHRyKCd5JykpO1xuICAgICAgICAgICAgICB2YXIgayA9IDAuMDU7IC8vINC60L7RjdGE0YTQuNGG0LjQtdC90YIg0YHQvNC10YnQtdC90LjRjyDQt9CwINC60YPRgNGB0L7RgNC+0LxcblxuICAgICAgICAgICAgICB2YXIgJG1vdmUgPSAkdGhpcy5maW5kKCcuanMtbW92ZS1zdmcnKTtcbiAgICAgICAgICAgICAgJG1vdmUuYXR0cigneCcsIGJhc2VYIC0gayAqIF9kaWZmWCk7XG4gICAgICAgICAgICAgICRtb3ZlLmF0dHIoJ3knLCBiYXNlWSAtIGsgKiBfZGlmZlkpO1xuICAgICAgICAgICAgfSAvL9C00LLQuNCz0LDQtdC8INC60YDRg9Cz0LhcblxuXG4gICAgICAgICAgICB2YXIgJHN2Z0NpcmNsZSA9ICR0aGlzLmZpbmQoJy5qcy1tb3ZlLWNpcmNsZScpO1xuXG4gICAgICAgICAgICBpZiAoJHN2Z0NpcmNsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8g0YHQvNC10YnQsNC10Lwg0LrRgNGD0LPQuCDQvdCwINC/0L7Qt9C40YbQuNGOINC60YPRgNGB0L7RgNCwXG4gICAgICAgICAgICAgICRzdmdDaXJjbGUuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyICRjaXJjbGUgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBiYXNlWCA9IHBhcnNlSW50KCRjaXJjbGUuYXR0cignanN4JykpO1xuICAgICAgICAgICAgICAgIHZhciBiYXNlWSA9IHBhcnNlSW50KCRjaXJjbGUuYXR0cignanN5JykpO1xuICAgICAgICAgICAgICAgIHZhciBrID0gMC4wNTsgLy8g0LrQvtGN0YTRhNC40YbQuNC10L3RgiDRgdC80LXRidC10L3QuNGPINC30LAg0LrRg9GA0YHQvtGA0L7QvFxuXG4gICAgICAgICAgICAgICAgJGNpcmNsZS5hdHRyKCdjeCcsIGJhc2VYIC0gayAqIF9kaWZmWCk7XG4gICAgICAgICAgICAgICAgJGNpcmNsZS5hdHRyKCdjeScsIGJhc2VZIC0gayAqIF9kaWZmWSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSAvLyDQtNCy0LjQs9Cw0LXQvCDQv9GA0L7QuNC30LLQvtC70YzQvdGD0Y4g0YTQuNCz0YPRgNGDXG5cblxuICAgICAgICAgICAgdmFyICRzdmdQYXRoID0gJHRoaXMuZmluZCgnLmpzLW1vdmUtc3ZnLXBhdGgnKTtcblxuICAgICAgICAgICAgaWYgKCRzdmdQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICB2YXIgcGF0aCA9ICRzdmdQYXRoLmF0dHIoJ2Rjb3B5Jyk7XG4gICAgICAgICAgICAgIHZhciBwYXRoQXJyYXkgPSBwYXRoLnNwbGl0KCdDJykuam9pbignIEMnKS5zcGxpdCgnSCcpLmpvaW4oJyBIJykuc3BsaXQoJ1onKS5qb2luKCcgWicpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgIHZhciBfayA9IDAuMDU7IC8vINC60L7RjdGE0YTQuNGG0LjQtdC90YIg0YHQvNC10YnQtdC90LjRjyDQt9CwINC60YPRgNGB0L7RgNC+0LxcblxuICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgIHZhciBuZXdQYXRoID0gW107XG5cbiAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGksIHBhdGhBcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGhBcnJheVtpXS5pbmRleE9mKCdNJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBwYXRoQXJyYXlbaV0uc3BsaXQoJ00nKVsxXTtcbiAgICAgICAgICAgICAgICAgIG5ld1BhdGhbaV0gPSAnTScgKyAocGFyc2VGbG9hdCh0ZW1wKSAtIF9rICogX2RpZmZYKTtcbiAgICAgICAgICAgICAgICAgIG5ld1BhdGhbaSArIDFdID0gcGFyc2VGbG9hdChwYXRoQXJyYXlbaSArIDFdKSAtIF9rICogX2RpZmZZO1xuICAgICAgICAgICAgICAgICAgaSA9IGkgKyAyO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhdGhBcnJheVtpXS5pbmRleE9mKCdDJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgdmFyIF90ZW1wID0gcGF0aEFycmF5W2ldLnNwbGl0KCdDJylbMV07XG4gICAgICAgICAgICAgICAgICBuZXdQYXRoW2ldID0gJ0MnICsgKHBhcnNlRmxvYXQoX3RlbXApIC0gX2sgKiBfZGlmZlgpO1xuICAgICAgICAgICAgICAgICAgbmV3UGF0aFtpICsgMV0gPSBwYXJzZUZsb2F0KHBhdGhBcnJheVtpICsgMV0pIC0gX2sgKiBfZGlmZlk7XG4gICAgICAgICAgICAgICAgICBuZXdQYXRoW2kgKyAyXSA9IHBhcnNlRmxvYXQocGF0aEFycmF5W2kgKyAyXSkgLSBfayAqIF9kaWZmWDtcbiAgICAgICAgICAgICAgICAgIG5ld1BhdGhbaSArIDNdID0gcGFyc2VGbG9hdChwYXRoQXJyYXlbaSArIDNdKSAtIF9rICogX2RpZmZZO1xuICAgICAgICAgICAgICAgICAgbmV3UGF0aFtpICsgNF0gPSBwYXJzZUZsb2F0KHBhdGhBcnJheVtpICsgNF0pIC0gX2sgKiBfZGlmZlg7XG4gICAgICAgICAgICAgICAgICBuZXdQYXRoW2kgKyA1XSA9IHBhcnNlRmxvYXQocGF0aEFycmF5W2kgKyA1XSkgLSBfayAqIF9kaWZmWTtcbiAgICAgICAgICAgICAgICAgIGkgPSBpICsgNjtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXRoQXJyYXlbaV0uaW5kZXhPZignSCcpID09IDApIHtcbiAgICAgICAgICAgICAgICAgIHZhciBfdGVtcDIgPSBwYXRoQXJyYXlbaV0uc3BsaXQoJ0gnKVsxXTtcbiAgICAgICAgICAgICAgICAgIG5ld1BhdGhbaV0gPSAnSCcgKyAocGFyc2VGbG9hdChfdGVtcDIpIC0gX2sgKiBfZGlmZlgpO1xuICAgICAgICAgICAgICAgICAgaSA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhdGhBcnJheVtpXSA9PSAnWicpIHtcbiAgICAgICAgICAgICAgICAgIG5ld1BhdGhbaV0gPSAnWic7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAkc3ZnUGF0aC5hdHRyKCdkJywgbmV3UGF0aC5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcblxuICAgICAgICAgIGlmICgkdGhpcy5maW5kKCcuanMtbW92ZS1zdmcnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vINGB0LzQtdGJ0LDQtdC8INC/0YDRj9C80L7Rg9Cz0L7Qu9GM0L3QuNC6INC90LAg0L/QvtC30LjRhtC40Y4g0LrRg9GA0YHQvtGA0LBcbiAgICAgICAgICAgIHZhciAkYmFzZSA9ICR0aGlzLmZpbmQoJy5qcy1tb3ZlLXN2Zy1vcmlnaW5hbCcpO1xuICAgICAgICAgICAgdmFyIGJhc2VYID0gcGFyc2VJbnQoJGJhc2UuYXR0cigneCcpKTtcbiAgICAgICAgICAgIHZhciBiYXNlWSA9IHBhcnNlSW50KCRiYXNlLmF0dHIoJ3knKSk7XG4gICAgICAgICAgICB2YXIgJG1vdmUgPSAkdGhpcy5maW5kKCcuanMtbW92ZS1zdmcnKTtcbiAgICAgICAgICAgICRtb3ZlLmF0dHIoJ3gnLCBiYXNlWCk7XG4gICAgICAgICAgICAkbW92ZS5hdHRyKCd5JywgYmFzZVkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciAkc3ZnQ2lyY2xlID0gJHRoaXMuZmluZCgnLmpzLW1vdmUtY2lyY2xlJyk7XG5cbiAgICAgICAgICBpZiAoJHN2Z0NpcmNsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vINGB0LzQtdGJ0LDQtdC8INC60YDRg9Cz0Lgg0L3QsCDQv9C+0LfQuNGG0LjRjiDQutGD0YDRgdC+0YDQsFxuICAgICAgICAgICAgJHN2Z0NpcmNsZS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyICRjaXJjbGUgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICB2YXIgYmFzZVggPSBwYXJzZUludCgkY2lyY2xlLmF0dHIoJ2pzeCcpKTtcbiAgICAgICAgICAgICAgdmFyIGJhc2VZID0gcGFyc2VJbnQoJGNpcmNsZS5hdHRyKCdqc3knKSk7XG4gICAgICAgICAgICAgICRjaXJjbGUuYXR0cignY3gnLCBiYXNlWCk7XG4gICAgICAgICAgICAgICRjaXJjbGUuYXR0cignY3knLCBiYXNlWSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgJHN2Z1BhdGggPSAkdGhpcy5maW5kKCcuanMtbW92ZS1zdmctcGF0aCcpO1xuXG4gICAgICAgICAgaWYgKCRzdmdQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHBhdGggPSAkc3ZnUGF0aC5hdHRyKCdkY29weScpO1xuICAgICAgICAgICAgJHN2Z1BhdGguYXR0cignZCcsIHBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gLy8gVE9ETyDQvtCz0YDQsNC90LjRh9C10L3QuNC1INC80LDQutGB0LjQvNCw0LvRjNC90L7QuSDQtNC10YTQvtGA0LzQsNGG0LjQuFxuICAgICAgLy8gLy8gVE9ETyDQsNGB0LjQvdGF0YDQvtC90L3QsNGPINC00LXRhNC+0YDQvNCw0YbQuNGPINC70LXQstC+0LPQviDQuCDQv9GA0LDQstC+0LPQviDRgdC60LDRgtC+0LJcbiAgICAgIC8vIGxldCAkd2F2ZSA9ICQoJy5qcy1zY3JvbGwtd2F2ZScpO1xuICAgICAgLy8gbGV0IGRpZmYgPSA0MDtcbiAgICAgIC8vIGxldCBrID0gMC43O1xuICAgICAgLy8gfSkgLy8g0YHQutC+0YDQvtGB0YLRjCDQtNC10YTQvtGA0LzQsNGG0LjQuCDQstC+0LvQvdGLXG4gICAgICAvLyAvLyDQutC+0L7QtNC40L3QsNGC0Ysg0L/RgNC+0L/QuNGB0YvQstCw0LXQvCDRhdCw0YDQtNC60L7RgNC90L4gOSDQuCAxMVxuICAgICAgLy8gbGV0IG1vdmVQYXRoID0gZnVuY3Rpb24gKCRwYXRoLCBtb3ZlKSB7XG4gICAgICAvLyAgICAgbGV0IGQgPSAkcGF0aC5hdHRyKCdkJyk7XG4gICAgICAvLyAgICAgbGV0IHRlbXAgPSBkLnNwbGl0KCcgJyk7XG4gICAgICAvLyAgICAgdGVtcFs5XSA9IG1vdmU7XG4gICAgICAvLyAgICAgdGVtcFsxMV0gPSBtb3ZlO1xuICAgICAgLy8gICAgICRwYXRoLmF0dHIoJ2QnLCB0ZW1wLmpvaW4oJyAnKSk7XG4gICAgICAvLyB9XG4gICAgICAvLyBpZiAoJHdhdmUubGVuZ3RoKSB7XG4gICAgICAvLyAgICAgbGV0ICRwYXRoID0gJHdhdmUuZmluZCgncGF0aCcpO1xuICAgICAgLy8gICAgIG1vdmVQYXRoKCRwYXRoLCBkaWZmKTtcbiAgICAgIC8vICAgICAkKCcuYi1wYWdlLXdyYXBwZXInKS5vbignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gICAgICAgICBtb3ZlUGF0aCgkcGF0aCwgZGlmZiAtICQoJy5iLXBhZ2Utd3JhcHBlcicpLnNjcm9sbFRvcCgpICogayk7XG4gICAgICAvLyAgICAgfSk7XG4gICAgICAvLyB9XG4gICAgICB2YXIgJHdhdmVXcmFwID0gJCgnLmpzLWNpcmNsZS13cmFwJyk7XG4gICAgICB2YXIgJHdhdmVOZXcgPSAkKCcuanMtc2Nyb2xsLXdhdmUnKTtcbiAgICAgICR3YXZlTmV3LmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHBhdGggPSAkKHRoaXMpLmZpbmQoJ3BhdGgnKTtcbiAgICAgICAgdmFyIGQgPSAkcGF0aC5hdHRyKCdkJyk7XG4gICAgICAgIHZhciB0ZW1wID0gZC5zcGxpdCgnICcpO1xuICAgICAgICB2YXIgc3RhcnRIZWlnaHQgPSAkd2F2ZVdyYXAuaW5uZXJIZWlnaHQoKTtcbiAgICAgICAgdmFyIGZpbmlzaEhlaWdodCA9IDEyMDA7XG4gICAgICAgIHZhciBzdGFydFJhZGl1cyA9IHRlbXBbNl07IC8vINCi0L7Rh9C60LAg0LIg0L/QuNC60YHQtdC70Y/RhSwg0L/RgNC4INGB0LrRgNC+0LvQu9C1INC6INC60L7RgtC+0YDQvtC5INGA0LDQtNC40YPRgSBwYXRoINCx0YPQtNC10YIg0YDQsNCy0LXQvSAwXG5cbiAgICAgICAgdmFyIG1pZGRsZVBvaW50cyA9IDYyNTtcblxuICAgICAgICB2YXIgbW92ZVBhdGhOZXcgPSBmdW5jdGlvbiBtb3ZlUGF0aE5ldygpIHtcbiAgICAgICAgICBpZiAoJCgnLmItcGFnZS13cmFwcGVyJykuc2Nyb2xsVG9wKCkgPiBtaWRkbGVQb2ludHMpIHtcbiAgICAgICAgICAgIHRlbXBbOV0gPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wWzldID0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJCgnLmItcGFnZS13cmFwcGVyJykuc2Nyb2xsVG9wKCkgPD0gMiAqIG1pZGRsZVBvaW50cykge1xuICAgICAgICAgICAgaWYgKHRlbXBbOV0gPT0gJzEnKSB7XG4gICAgICAgICAgICAgIHRlbXBbNl0gPSAoJCgnLmItcGFnZS13cmFwcGVyJykuc2Nyb2xsVG9wKCkgLSAwKSAqICgwIC0gTnVtYmVyKHN0YXJ0UmFkaXVzKSkgLyAobWlkZGxlUG9pbnRzIC0gMCkgKyBOdW1iZXIoc3RhcnRSYWRpdXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGVtcFs2XSA9ICgkKCcuYi1wYWdlLXdyYXBwZXInKS5zY3JvbGxUb3AoKSAtIG1pZGRsZVBvaW50cykgKiAoTnVtYmVyKHN0YXJ0UmFkaXVzKSAtIDApIC8gKDIgKiBtaWRkbGVQb2ludHMgLSBtaWRkbGVQb2ludHMpICsgMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHdhdmVXcmFwLmhlaWdodCgoJCgnLmItcGFnZS13cmFwcGVyJykuc2Nyb2xsVG9wKCkgLSAwKSAqIChmaW5pc2hIZWlnaHQgLSBzdGFydEhlaWdodCkgLyAoMiAqIG1pZGRsZVBvaW50cyAtIDApICsgc3RhcnRIZWlnaHQpO1xuICAgICAgICAgICAgJHBhdGguYXR0cignZCcsIHRlbXAuam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCR3YXZlTmV3Lmxlbmd0aCkge1xuICAgICAgICAgICQoJy5iLXBhZ2Utd3JhcHBlcicpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtb3ZlUGF0aE5ldygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7IC8vID09PT09PT09PT09PT09PT09PT09XG4gICAgLy8ga29udG9yYTogc2NyaXB0XG4gICAgLy8gMDAtMDAtMjAxNzogQXV0aG9yXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8g0J7Qv9C40YHQsNC90LjQtVxuICAgIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRpbWVyID0gJCgnLmpzLXRpbWVyJyk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFRpbWVSZW1haW5pbmcoZW5kdGltZSkge1xuICAgICAgICB2YXIgdCA9IERhdGUucGFyc2UoZW5kdGltZSkgLSBEYXRlLnBhcnNlKG5ldyBEYXRlKCkpO1xuICAgICAgICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IodCAvIDEwMDAgJSA2MCk7XG4gICAgICAgIHZhciBtaW51dGVzID0gTWF0aC5mbG9vcih0IC8gMTAwMCAvIDYwICUgNjApO1xuICAgICAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKHQgLyAoMTAwMCAqIDYwICogNjApICUgMjQpO1xuICAgICAgICB2YXIgZGF5cyA9IE1hdGguZmxvb3IodCAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgJ3RvdGFsJzogdCxcbiAgICAgICAgICAnZGF5cyc6IGRheXMsXG4gICAgICAgICAgJ2hvdXJzJzogaG91cnMsXG4gICAgICAgICAgJ21pbnV0ZXMnOiBtaW51dGVzLFxuICAgICAgICAgICdzZWNvbmRzJzogc2Vjb25kc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbml0aWFsaXplQ2xvY2soJHRpbWVyLCBkZWFkTGluZSkge1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDbG9jaygpIHtcbiAgICAgICAgICB2YXIgdCA9IGdldFRpbWVSZW1haW5pbmcoZGVhZExpbmUpO1xuICAgICAgICAgICR0aW1lci5maW5kKCcuanMtZGF5cycpLnRleHQodC5kYXlzKTtcbiAgICAgICAgICAkdGltZXIuZmluZCgnLmpzLWhvdXJzJykudGV4dCgoJzAnICsgdC5ob3Vycykuc2xpY2UoLTIpKTtcbiAgICAgICAgICAkdGltZXIuZmluZCgnLmpzLW1pbnV0ZXMnKS50ZXh0KCgnMCcgKyB0Lm1pbnV0ZXMpLnNsaWNlKC0yKSk7XG4gICAgICAgICAgJHRpbWVyLmZpbmQoJy5qcy1zZWNvbmRzJykudGV4dCgoJzAnICsgdC5zZWNvbmRzKS5zbGljZSgtMikpO1xuXG4gICAgICAgICAgaWYgKHQudG90YWwgPD0gMCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1laW50ZXJ2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZUNsb2NrKCk7XG4gICAgICAgIHZhciB0aW1laW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh1cGRhdGVDbG9jaywgMTAwMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgkdGltZXIubGVuZ3RoKSB7XG4gICAgICAgIHZhciBkZWFkTGluZSA9ICR0aW1lci5kYXRhKCdkZWFkbGluZScpOyAvLycyMDE1LTEyLTMxJ1xuXG4gICAgICAgIGluaXRpYWxpemVDbG9jaygkdGltZXIsIGRlYWRMaW5lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICA7XG4gICAgdmFyIHZpZGVvID0gJCgnLmpzLXZpZGVvJylbMF07XG4gICAgJCgnLmpzLXBsYXktdmlkZW8nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodmlkZW8ucGF1c2VkKSB7XG4gICAgICAgIHZpZGVvLnBsYXkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgO1xuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcGx1Z3MgPSAkKCcuanMtcGx1Zy1tZScpO1xuXG4gICAgICBpZiAoJHBsdWdzLmxlbmd0aCkge1xuICAgICAgICB2YXIgcGx1Z2luZyA9IGZ1bmN0aW9uIHBsdWdpbmcoKSB7XG4gICAgICAgICAgJHBsdWdzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyICRwbHVnID0gJCh0aGlzKTtcbiAgICAgICAgICAgIHZhciAkbGFzdCA9ICRwbHVnLmZpbmQoJy5qcy1hZGRpdGlvbmFsLWNhcmRzOmxhc3QnKTsgLy/Qv9C+0LvRg9GH0LDQtdC8INC/0L7RgdC70LXQtNC90Y7RjiDRgdGC0YDQvtC60YNcblxuICAgICAgICAgICAgdmFyIG9mZnNldHMgPSBbXTtcbiAgICAgICAgICAgICRwbHVnLmZpbmQoJy5qcy1hZGRpdGlvbmFsLWNhcmRzJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgICAgICAgIHZhciB0b3AgPSBwYXJzZUludCgkdGhpcy5vZmZzZXQoKS50b3ApO1xuICAgICAgICAgICAgICBvZmZzZXRzW3RvcF0gPSBvZmZzZXRzW3RvcF0gPyBvZmZzZXRzW3RvcF0gKyAxIDogMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIG1heExlbmd0aCA9IE1hdGgudHJ1bmMoJHBsdWcud2lkdGgoKSAvICRsYXN0WzBdLmNsaWVudFdpZHRoKTsgLy/QvtC/0YDQtdC00LXQu9GP0LXQvCDRgdC60L7Qu9GM0LrQviDQvdGD0LbQvdC+INC30LDQs9C70YPRiNC10LpcblxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBvZmZzZXRzW29mZnNldHMubGVuZ3RoIC0gMV07IC8v0L/QvtC70YPRh9Cw0LXQvCDQt9Cw0LPQu9GD0YjQutGDXG5cbiAgICAgICAgICAgIHZhciBuZWVkID0gbWF4TGVuZ3RoIC0gY3VycmVudDtcbiAgICAgICAgICAgIHZhciAkc2x1ZyA9ICRwbHVnLmZpbmQoJy5iLWFkZGl0aW9uYWwtY2FyZHNfX2l0ZW0tLXBsdWcnKTsgLy8g0L/RgNGP0YfQtdC8L9C/0L7QutCw0LfRi9Cy0LDQtdC8INC30LDQs9C70YPRiNC60LhcblxuICAgICAgICAgICAgJHNsdWcuaGlkZSgpLmZpbHRlcignOm5vdCg6Zmlyc3QpJykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgIGlmIChuZWVkID09IDApIHtcbiAgICAgICAgICAgICAgJHNsdWcuaGlkZSgpLmZpbHRlcignOm5vdCg6Zmlyc3QpJykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkc2x1Zy5zaG93KCk7XG4gICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICRzbHVnWzBdLm91dGVySFRNTDtcblxuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG5lZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgICRzbHVnLmFmdGVyKHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHBsdWdpbmcoKTtcbiAgICAgICAgdmFyIHRyb3QgPSB2b2lkIDA7XG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0cm90KTtcbiAgICAgICAgICB0cm90ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwbHVnaW5nKCk7XG4gICAgICAgICAgfSwgNTApO1xuICAgICAgICB9KTtcbiAgICAgICAgJCgnLmpzLXRhYi10cmlnZ2VyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0cm90KTtcbiAgICAgICAgICB0cm90ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBwbHVnaW5nKCk7XG4gICAgICAgICAgfSwgNTApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICA7XG4gICAgJC5idmkoe1xuICAgICAgJ2J2aV90YXJnZXQnOiAnLmpzLWV5ZScsXG4gICAgICAvLyDQmtC70LDRgdGBINGB0YHRi9C70LrQuCDQstC60LvRjtGH0LXQvdC40Y8g0L/Qu9Cw0LPQuNC90LBcbiAgICAgICdidmlfdGhlbWUnOiAnd2hpdGUnLFxuICAgICAgLy8g0KbQstC10YIg0YHQsNC50YLQsFxuICAgICAgJ2J2aV9mb250JzogJ2FyaWFsJyxcbiAgICAgIC8vINCo0YDQuNGE0YJcbiAgICAgICdidmlfZm9udF9zaXplJzogMTYsXG4gICAgICAvLyDQoNCw0LfQvNC10YAg0YjRgNC40YTRgtCwXG4gICAgICAnYnZpX2xldHRlcl9zcGFjaW5nJzogJ25vcm1hbCcsXG4gICAgICAvLyDQnNC10LbQsdGD0LrQstC10L3QvdGL0Lkg0LjQvdGC0LXRgNCy0LDQu1xuICAgICAgJ2J2aV9saW5lX2hlaWdodCc6ICdub3JtYWwnLFxuICAgICAgLy8g0JzQtdC20LTRg9GB0YLRgNC+0YfQvdGL0Lkg0LjQvdGC0LXRgNCy0LDQu1xuICAgICAgJ2J2aV9pbWFnZXMnOiAnZ3JheXNjYWxlJyxcbiAgICAgIC8vINCY0LfQvtCx0YDQsNC20LXQvdC40Y9cbiAgICAgICdidmlfcmVsb2FkJzogZmFsc2UsXG4gICAgICAvLyDQn9C10YDQtdC30LDQs9GA0YPQt9C60LAg0YHRgtGA0LDQvdC40YbRiyDQv9GA0Lgg0LLRi9C60LvRjtGH0LXQvdC40Lgg0L/Qu9Cw0LPQuNC90LBcbiAgICAgICdidmlfZml4ZWQnOiBmYWxzZSxcbiAgICAgIC8vINCk0LjQutGB0LjRgNC+0LLQsNC90LjQtSDQv9Cw0L3QtdC70Lgg0LTQu9GPINGB0LvQsNCx0L7QstC40LTRj9GJ0LjRhSDQstCy0LXRgNGF0YMg0YHRgtGA0LDQvdC40YbRi1xuICAgICAgJ2J2aV90dHMnOiBmYWxzZSxcbiAgICAgIC8vINCh0LjQvdGC0LXQtyDRgNC10YfQuFxuICAgICAgJ2J2aV9mbGFzaF9pZnJhbWUnOiB0cnVlLFxuICAgICAgLy8g0JLRgdGC0YDQvtC10L3QvdGL0LUg0Y3Qu9C10LzQtdC90YLRiyAo0LLQuNC00LXQviwg0LrQsNGA0YLRiyDQuCDRgtC0LilcbiAgICAgICdidmlfaGlkZSc6IGZhbHNlIC8vINCh0LrRgNGL0LLQsNC10YIg0L/QsNC90LXQu9GMINC00LvRjyDRgdC70LDQsdC+0LLQuNC00Y/RidC40YUg0Lgg0L/QvtC60LDQt9GL0LLQsNC10YIg0LjQutC+0L3QutGDINC/0LDQvdC10LvQuC5cblxuICAgIH0pO1xuICAgIDtcblxuICAgIGlmIChkb2N1bWVudC5jb29raWUgPT09IHVuZGVmaW5lZCkge30gZWxzZSB7XG4gICAgICBpZiAoZG9jdW1lbnQuY29va2llLm1hdGNoKCd0cnVlJykgPT09IG51bGwpIHtcbiAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdjb29raWUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAkKCcuanMtY2xvc2UtY29va2llJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2Nvb2tpZScpO1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSAndHJ1ZSc7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgJCgnLmpzLXByZWxvYWRlcicpLm9uKCdhbmltYXRpb25zdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQodGhpcykucGFyZW50cygnLmItcG9wdXAnKS5sZW5ndGgpIHtcbiAgICAgICAgICAkKHRoaXMpLnBhcmVudHMoJy5iLXBvcHVwJykuYWRkQ2xhc3MoJ25vLXNjcm9sbCBuby10b3VjaCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICQoJy5qcy1wcmVsb2FkZXInKS5vbignYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5hbmltYXRpb25OYW1lID09ICdzdHJva2UtYW5pbWF0aW9uLTMnKSB7XG4gICAgICAgICAgJCh0aGlzKS5wYXJlbnRzKCcuYi1wb3B1cCcpLnJlbW92ZUNsYXNzKCduby1zY3JvbGwgbm8tdG91Y2gnKTtcbiAgICAgICAgICAkKHRoaXMpLmZhZGVPdXQoJ2Zhc3QnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgO1xuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBodG1sID0gJCgnaHRtbCcpO1xuXG4gICAgICBpZiAoaHRtbC5oYXNDbGFzcygnbm8tdG91Y2hldmVudHMnKSkge1xuICAgICAgICAkKCcuanMtaG92ZXItY2FsbCcpLm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJCh0aGlzKS5hdHRyKCdocmVmJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIDtcbiAgfVxuXG4gIDtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZG9jdW1lbnRSZWFkeSk7XG59KSgpOyJdfQ==
